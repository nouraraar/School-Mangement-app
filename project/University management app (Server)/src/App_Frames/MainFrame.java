/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package App_Frames;

import Dialogs.Message_Dialog;
import Models.*;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author amir,chedi,nour
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
       
        initComponents();
        setInvisibility();
        //File img = new File("src/server_icon.png");
        //if(img.exists())
            this.setIconImage(new ImageIcon(getClass().getResource("/server_icon.png")).getImage());

         setVisible(true);
        setLocationRelativeTo(null);
        
    }
    
    private void setInvisibility()
    {
       
        statusLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootPanel = new javax.swing.JPanel();
        frameLabel = new javax.swing.JLabel();
        closeBtn = new javax.swing.JLabel();
        minimizeBtn = new javax.swing.JLabel();
        ipByte1 = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(127,0,255,1));
        jLabel4 = new javax.swing.JLabel();
        ipByte2 = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(0,0,255,1));
        jLabel5 = new javax.swing.JLabel();
        ipByte3 = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(0,0,255,1));
        jLabel6 = new javax.swing.JLabel();
        ipByte4 = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(1,0,255,1));
        ip_icon = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        startBtn = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTA = new javax.swing.JTextArea();
        exportBtn = new javax.swing.JButton();
        exportLabel = new javax.swing.JLabel();
        onlineDB = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        rootPanel.setBackground(new java.awt.Color(33, 35, 35));
        rootPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 51, 255), null));
        rootPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                rootPanelMouseDragged(evt);
            }
        });
        rootPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rootPanelMousePressed(evt);
            }
        });

        frameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        frameLabel.setForeground(new java.awt.Color(255, 255, 255));
        frameLabel.setText("Database access server");

        closeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/closeBtn_icon.png"))); // NOI18N
        closeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeBtnMouseClicked(evt);
            }
        });

        minimizeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/minimizeBtn_icon.png"))); // NOI18N
        minimizeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimizeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeBtnMouseClicked(evt);
            }
        });

        ipByte1.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText(".");

        ipByte2.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setText(".");

        ipByte3.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText(".");

        ipByte4.setEnabled(false);

        ip_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-web-address-64.png"))); // NOI18N

        startBtn.setBackground(new java.awt.Color(33, 35, 35));
        startBtn.setForeground(new java.awt.Color(255, 255, 255));
        startBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        startBtn.setText("Start");
        startBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        startBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        startBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startBtnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                startBtnMousePressed(evt);
            }
        });

        statusLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        statusLabel.setForeground(new java.awt.Color(255, 255, 255));

        logTA.setEditable(false);
        logTA.setBackground(new java.awt.Color(34, 40, 44));
        logTA.setColumns(20);
        logTA.setForeground(new java.awt.Color(255, 0, 102));
        logTA.setRows(5);
        jScrollPane1.setViewportView(logTA);

        exportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-export-30 (2).png"))); // NOI18N
        exportBtn.setAutoscrolls(true);
        exportBtn.setBorderPainted(false);
        exportBtn.setContentAreaFilled(false);
        exportBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exportBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportBtn.setIconTextGap(0);
        exportBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportBtnMouseClicked(evt);
            }
        });

        exportLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        exportLabel.setForeground(new java.awt.Color(144, 153, 164));
        exportLabel.setText("export logs");

        onlineDB.setBackground(new java.awt.Color(34, 40, 44));
        onlineDB.setForeground(new java.awt.Color(255, 255, 255));
        onlineDB.setSelected(true);
        onlineDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        onlineDB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onlineDBMouseClicked(evt);
            }
        });
        onlineDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineDBActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(34, 40, 44));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Online DB");
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout rootPanelLayout = new javax.swing.GroupLayout(rootPanel);
        rootPanel.setLayout(rootPanelLayout);
        rootPanelLayout.setHorizontalGroup(
            rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rootPanelLayout.createSequentialGroup()
                .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rootPanelLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(ip_icon)
                        .addGap(18, 18, 18)
                        .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(rootPanelLayout.createSequentialGroup()
                                .addComponent(ipByte1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ipByte2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ipByte3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ipByte4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(rootPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(rootPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rootPanelLayout.createSequentialGroup()
                        .addComponent(frameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(minimizeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeBtn))
                    .addGroup(rootPanelLayout.createSequentialGroup()
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportLabel))))
            .addGroup(rootPanelLayout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(onlineDB)
                .addGap(16, 16, 16))
        );
        rootPanelLayout.setVerticalGroup(
            rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rootPanelLayout.createSequentialGroup()
                .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frameLabel)
                    .addComponent(closeBtn)
                    .addComponent(minimizeBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rootPanelLayout.createSequentialGroup()
                        .addComponent(exportLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rootPanelLayout.createSequentialGroup()
                        .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(rootPanelLayout.createSequentialGroup()
                                .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ipByte1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(ipByte2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ipByte3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ipByte4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ip_icon))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(onlineDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addGap(48, 48, 48)
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(exportBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rootPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rootPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rootPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rootPanelMousePressed
        // TODO add your handling code here:
        mousePosition = evt.getPoint();
    }//GEN-LAST:event_rootPanelMousePressed

    private void rootPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rootPanelMouseDragged
        // TODO add your handling code here:
        Point newPoint = evt.getLocationOnScreen();
        newPoint.translate(-mousePosition.x, -mousePosition.y); // Moves the point by given values from its location
        setLocation(newPoint);
    }//GEN-LAST:event_rootPanelMouseDragged

    private void minimizeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeBtnMouseClicked
        // TODO add your handling code here:
        setState(JFrame.ICONIFIED) ;
    }//GEN-LAST:event_minimizeBtnMouseClicked

    private void closeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeBtnMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_closeBtnMouseClicked

      private String getIpv4(int ip[])
    {
       
        String ipAdr = String.valueOf(ip[0])+"."+String.valueOf(ip[1])+"."+String.valueOf(ip[2])+"."+String.valueOf(ip[3]);
        return ipAdr;
    }
    
    private void startBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMousePressed
        // TODO add your handling code here:
        startBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        if(!isStarted)
        {
            //checking the existing of imgs folder
            File file = new File("imgs/");
            if(!file.exists())
            {
                
                setText("Folder 'imgs' not found .");
                //creating imgs folder
                if(file.mkdir())
                    setText("Folder 'imgs' created successfully .");
                else
                    setText("Failed to created folder 'imgs' , please create it manually");
            }
            isStarted=true;
            
            //disable server admin input
            ipEnabled(false);
            onlineDB.setEnabled(false);
            
            //setting the database server infromations 
            if(onlineDB.isSelected())
            {
                  DB_SERVER_IP = "remotemysql.com";
                  DB_NAME = ONLINE_DB_NAME;
                  
                  setText(" Online Database server  : "+DB_SERVER_IP);
            }
            else
            {
             
                DB_SERVER_IP =  getIpv4(new int[]{(Integer)ipByte1.getValue(),(Integer)ipByte2.getValue(),(Integer)ipByte3.getValue(),(Integer)ipByte4.getValue()});
                  DB_NAME = "administration";
                  setText("Local  Database server : "+DB_SERVER_IP);
 
            }
            // launching server Thread
           new Thread(new Runnable() {

               @Override
               public void run() {
                   try {
                // opening socket
                serverSocket=new ServerSocket(PORT);
                statusLabel.setVisible(true);
                statusLabel.setText("Server is  started on port "+PORT+" ...");
                
                String hostIp = null;
               setText("Server is started on port "+PORT+" at "+LocalDateTime.now());
                //starting the server until the connection is closed
                while(!serverSocket.isClosed())
                {
                    //accepting clients
                    Socket client =serverSocket.accept();
                    hostIp = client.getInetAddress().getHostAddress();
                    
                    //launching client thread :
                    setText("Client "+hostIp+" connected on "+LocalDateTime.now());
                    new Thread(new Runnable() {

                        @Override
                        public void run() {
                            //init the streams
                           
                            try {
                                 // opening in/out streams with client
                               
                                     in = new ObjectInputStream(client.getInputStream());
                                      out = new ObjectOutputStream(client.getOutputStream());
                                
                                    //recieving client's request
                                    String request = (String) in.readObject();
                                    
                                    //finding the required action to perform 
                                    
                                    if(request.equals("+login"))
                                    {
                                        //login request
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //informing client that the connection is established
                                        out.writeObject("ok-");
                                        closeConnection();
                                    }else if(request.equals("+add_student"))
                                    {
                                        //add student request
                                        
                                        //recieving the new student
                                        Student student = (Student) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                       
 
                                        //connected to database
                                        //setting the querry
                                        String querry = "INSERT INTO `student` VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, student.getInscriptionNum());
                                        preparedStatement.setString(2, student.getCin());
                                        preparedStatement.setString(3, student.getLastName());
                                        preparedStatement.setString(4, student.getFirstName());
                                        preparedStatement.setString(5, student.getEmail());
                                        preparedStatement.setString(6, student.getAddress());
                                        
                                        preparedStatement.setInt(7,student.getLevel());
                                        preparedStatement.setString(8,student.getPhoneNum());
                                        preparedStatement.setInt(9,student.getGender());
                                        preparedStatement.setInt(10,student.getFieldId());
                                        preparedStatement.setString(11,student.getBirthDate());
                                        preparedStatement.setInt(12,((student.isHasPic())?1:0));
                                        int result = preparedStatement.executeUpdate();
                                        if(result == 1)
                                        {
                                            //inform the user that the student has been added to DB
                                            out.writeObject("ok-");
                                            //checking if the student have picture
                                            if(student.isHasPic())
                                            {
                                                //student have picture
                                                //recieving and setting the picture name
                                          String fileName = student.getInscriptionNum();
                                          //recieving the picture from the client
                                          ImageIcon img = (ImageIcon) in.readObject();
                                          //recieving the picture extension
                                        String extension = (String)in.readObject();
                                        //creating picture relative path
                                        fileName = "imgs/"+fileName+extension;         
                                        
                                        //creating empty bufferedImage with image object dimension
                                        BufferedImage bufferedImage = new BufferedImage(img.getImage().getWidth(null), img.getImage().getHeight(null), BufferedImage.TYPE_INT_RGB);
                                    //creating graphic with bufferedImage empty graphics        
                                    Graphics g = bufferedImage.getGraphics();
                                    //converting image object into the bufferedImage graphic 
                                    g.drawImage(img.getImage(), 0, 0, null);
                                    g.dispose();
                                    //wrting the bufferedImage bytes into the image file with the relative path
                                    ImageIO.write(bufferedImage, extension.substring(1), new File(fileName));
                                        //informing the client that the picture recieved and saved in the server
                                        out.writeObject("pic_recieved-");
                                          }
                                        }
                                        else
                                            //informing the client that an unknown error has occuried while saving the picture
                                            out.writeObject("err-");
                                    }else if(request.equals("+add_teacher"))
                                    {
                                        //add student request
                                        
                                        //recieving the student
                                        Teacher teacher = (Teacher) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                       
 
                                        //connected to database
                                        //setting the querry
                                        String querry = "INSERT INTO `teacher` VALUES (?,?,?,?,?,?,?,?,?)";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, teacher.getCin());
                                        preparedStatement.setString(2, teacher.getLastName());
                                        preparedStatement.setString(3, teacher.getFirstName());
                                        preparedStatement.setString(4, teacher.getEmail());
                                        preparedStatement.setString(5, teacher.getAddress());
                                        preparedStatement.setString(6,teacher.getPhoneNum());
                                        preparedStatement.setInt(7,teacher.getGender());
                   
                                        preparedStatement.setString(8,teacher.getBirthDate());
                                        preparedStatement.setInt(9,((teacher.isHasPic())?1:0));
                                        
                                        int result = preparedStatement.executeUpdate();
                                        if(result == 1)
                                        {
                                            //informing the client that the teacher has been added successfully
                                            out.writeObject("ok-");
                                            //checking if the teacher has picture
                                            if(teacher.isHasPic())
                                            {
                                                //getting image name
                                          String fileName = teacher.getCin();
                                          //recieving the image from the client
                                          ImageIcon img = (ImageIcon) in.readObject();
                                        String extension = (String)in.readObject();
                                        //setting the image relative path
                                        fileName = "imgs/"+fileName+extension;         
                                        //creating empty bufferedImage with image dimension
                                        BufferedImage bufferedImage = new BufferedImage(img.getImage().getWidth(null), img.getImage().getHeight(null), BufferedImage.TYPE_INT_RGB);
                                            //craeting graphic with the bufferedImage graphic
                                    Graphics g = bufferedImage.getGraphics();
                                    //filling the bufferedImage graphic with the image bytes 
                                    g.drawImage(img.getImage(), 0, 0, null);
                                    g.dispose();
                                    //writing the bufferedImage bytes into the image file with the relative path
                                    ImageIO.write(bufferedImage, extension.substring(1), new File(fileName));
                                        //informing the client that the picture has been converted and saved into the server
                                        out.writeObject("pic_recieved-");
                                          }
                                        }
                                        else
                                            //informing the client that an unknown error has occuried
                                            out.writeObject("err-");
                                    }
                                    
                                    else if(request.equals("+add_subject"))
                                    {
                                        //add subject request
                                        
                                        //recieving the subject
                                        Subject subject = (Subject) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                       
 
                                        //connected to database
                                        //setting the querry
                                        String querry = "INSERT INTO `teaching` VALUES(?,?,?,?,?);";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                         preparedStatement.setString(1, subject.getTeacherCin());
                                         preparedStatement.setInt(2, subject.getFieldId());
                                         preparedStatement.setInt(3, subject.getLevel());
                                         preparedStatement.setInt(4, subject.getVolume());
                                         preparedStatement.setString(5, subject.getDescription());
                                         int result=preparedStatement.executeUpdate();
                                         

                                        if(result == 1)
                                        {
                                            //informing the client that the subject has been added successfully
                                            out.writeObject("ok-");
                                          
                                        }
                                        else
                                            //informing the client that an  unknownerror has occuried
                                            out.writeObject("err-");   
                                         }
                                    
                                    
                                    else if(request.equals("+show_all_students"))
                                    {
                                         //show all students request
                                        
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        
                                        Statement statement = conn.createStatement();
                                        //setting the querry
                                        String querry = "SELECT * FROM `student`";
                                        ResultSet rs= statement.executeQuery(querry);
                                        
                                        //creating arraylist of selected students
                                        ArrayList<Student> result = new ArrayList<Student>();
                                        
                                        while(rs.next())
                                        {
                                                String inscriptionNum = rs.getString("inscriptionNum");
                                                String cin = rs.getString("cin");
                                                String firstName = rs.getString("firstName");
                                                String lastName = rs.getString("lastName");
                                                String email=rs.getString("email");
                                                String address = rs.getString("address");
                                                int level = rs.getInt("level");
                                                String phoneNum = rs.getString("phoneNum");
                                                int gender = rs.getInt("gender");
                                                int fieldId = rs.getInt("field_id");
                                                String birthDate = rs.getString("birthDate");
                                                boolean hasPic =(rs.getInt("hasPic")==1)?true:false;
                                                //create student with the selected row data 
                                                Student student = new Student(inscriptionNum, cin, firstName, lastName, email, address, level, phoneNum, gender, fieldId,birthDate,hasPic);
                                                //add the student into the collection
                                                result.add(student);
                                        }
                                        
                                        //informig the client that the querry has been fetched successfully and the data is coming in the stream
                                        out.writeObject("ok-");
                                        //sending data
                                        out.writeObject(result);
                                        
                                    }
                                    
                                    else if(request.equals("+show_all_teachers"))
                                    {
                                         //show all teachers request
                                        
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        
                                        Statement statement = conn.createStatement();
                                        //setting the querry
                                        String querry = "SELECT * FROM `teacher`";
                                        ResultSet rs= statement.executeQuery(querry);
                                        
                                        //creating arraylist of teachers
                                        ArrayList<Teacher> result = new ArrayList<Teacher>();
                                        
                                        while(rs.next())
                                        {
                                                String cin = rs.getString("cin");
                                                String firstName = rs.getString("firstName");
                                                String lastName = rs.getString("lastName");
                                                String email=rs.getString("email");
                                                String address = rs.getString("address");
                                                String phoneNum = rs.getString("phoneNum");
                                                int gender = rs.getInt("gender");
                                                String birthDate = rs.getString("birthDate");
                                                boolean hasPic =(rs.getInt("hasPic")==1)?true:false;
                                                Teacher teacher = new Teacher(cin, firstName, lastName, email, address, phoneNum, gender,birthDate,hasPic);
                                                result.add(teacher);
                                        }
                                        //informing the client that the querry has been fetched successfully and that the data is coming in the stream
                                        out.writeObject("ok-");
                                        //sending the data
                                        out.writeObject(result);
                                        
                                    }
                                    
                                    else if(request.equals("+show_all_subjects"))
                                    {
                                         //show all subjects request
                                        
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        
                                        Statement statement = conn.createStatement();
                                        //setting the querry
                                        String querry = "SELECT * FROM `teaching`";
                                        ResultSet rs= statement.executeQuery(querry);
                                        
                                        //creating arraylist of subjects
                                        ArrayList<Subject> result = new ArrayList<Subject>();
                                        
                                        while(rs.next())
                                        {
                                                String cin = rs.getString("cin");
                                                String description = rs.getString("wording");
                                                int level = rs.getInt("level");
                                                int volume = rs.getInt("workingHours");    
                                                int fieldId = rs.getInt("field_id");
                                              
                                                Subject subject = new Subject(cin, description, volume, level, fieldId);
                                                result.add(subject);
                                        }
                                        
                                        //informing the client that querry has been fetched successfully and that the data is coming in the stream
                                        out.writeObject("ok-");
                                        //sending data
                                        out.writeObject(result);
                                        
                                    }
                                    
                                    else if(request.equals("+show_students"))
                                    {
                                        //show students request
                                        
                                        //recieving the student
                                        Student student = (Student) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        //setting the querry
                                        String querry = "SELECT * FROM `student` WHERE `inscriptionNum`=? OR `cin`=? OR `lastName`=? OR `firstName`=?"
                                                + " OR `email`=? OR `address`=? OR (`level`=? AND `field_id`=?) OR `phoneNum`=? OR `gender`=? OR `birthDate`=?;";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, student.getInscriptionNum());
                                        preparedStatement.setString(2, student.getCin());
                                        preparedStatement.setString(3, student.getLastName());
                                        preparedStatement.setString(4, student.getFirstName());
                                        preparedStatement.setString(5, student.getEmail());
                                        preparedStatement.setString(6, student.getAddress());
                                        
                                        preparedStatement.setInt(7,student.getLevel());
                                         preparedStatement.setInt(8,student.getFieldId());
                                        preparedStatement.setString(9,student.getPhoneNum());
                                        preparedStatement.setInt(10,student.getGender());
                                       preparedStatement.setString(11,student.getBirthDate());
                                        
                                        ResultSet rs = preparedStatement.executeQuery();
                                        
                                        //creating arraylist of students
                                        ArrayList<Student> result = new ArrayList<Student>();
                                        
                                        while(rs.next())
                                        {
                                                String inscriptionNum = rs.getString("inscriptionNum");
                                                String cin = rs.getString("cin");
                                                String firstName = rs.getString("firstName");
                                                String lastName = rs.getString("lastName");
                                                String email=rs.getString("email");
                                                String address = rs.getString("address");
                                                int level = rs.getInt("level");
                                                String phoneNum = rs.getString("phoneNum");
                                                int gender = rs.getInt("gender");
                                                int fieldId = rs.getInt("field_id");
                                                String birthDate = rs.getString("birthDate");
                                                boolean hasPic =(rs.getInt("hasPic")==1)?true:false;
                                                Student newStudent = new Student(inscriptionNum, cin, firstName, lastName, email, address, level, phoneNum, gender, fieldId,birthDate,hasPic);
                                                result.add(newStudent);
                                        }
                                        //informing the client that the querry has been fetched successfully and that the data is coming on the stream
                                        out.writeObject("ok-");
                                        //sending data
                                        out.writeObject(result);
                                        
                                    }
                                    
                                     else if(request.equals("+show_teachers"))
                                    {
                                        //show teachers request
                                        
                                        //recieving the teacher
                                        Teacher teacher = (Teacher) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        //setting the querry
                                        String querry = "SELECT * FROM `teacher` WHERE `cin`=? OR `lastName`=? OR `firstName`=?"
                                                + " OR `email`=? OR `address`=? OR `phoneNum`=? OR `gender`=? OR `birthDate`=?;";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, teacher.getCin());
                                        preparedStatement.setString(2, teacher.getLastName());
                                        preparedStatement.setString(3, teacher.getFirstName());
                                        preparedStatement.setString(4, teacher.getEmail());
                                        preparedStatement.setString(5, teacher.getAddress());
                                        preparedStatement.setString(6,teacher.getPhoneNum());
                                        preparedStatement.setInt(7,teacher.getGender());
                                       preparedStatement.setString(8,teacher.getBirthDate());
                                        
                                        ResultSet rs = preparedStatement.executeQuery();
                                        
                                        //creating arraylist of teachers
                                        ArrayList<Teacher> result = new ArrayList<Teacher>();
                                        
                                        while(rs.next())
                                        {
                                                String cin = rs.getString("cin");
                                                String firstName = rs.getString("firstName");
                                                String lastName = rs.getString("lastName");
                                                String email=rs.getString("email");
                                                String address = rs.getString("address");
                                                String phoneNum = rs.getString("phoneNum");
                                                int gender = rs.getInt("gender");
                                                String birthDate = rs.getString("birthDate");
                                                boolean hasPic =(rs.getInt("hasPic")==1)?true:false;
                                                Teacher newTeacher = new Teacher(cin, firstName, lastName, email, address,phoneNum, gender,birthDate,hasPic);
                                                result.add(newTeacher);
                                        }
                                        
                                        //informing the client that the querry has been fetched successfully and that the data is coming on the stream
                                        out.writeObject("ok-");
                                        //sending data
                                        out.writeObject(result);
                                        
                                    }
                                    
                                     else if(request.equals("+show_subjects"))
                                    {
                                        //show subjects request
                                        
                                        //recieving the subject
                                        Subject subject = (Subject) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        //setting the querry
                                        String querry = "SELECT * FROM `teaching` WHERE  `cin`=? OR (`field_id`=? AND `level`=?) OR `workingHours`=? OR `wording`=?;";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, subject.getTeacherCin());
                                        preparedStatement.setInt(2, subject.getFieldId());
                                        preparedStatement.setInt(3, subject.getLevel());
                                        preparedStatement.setInt(4, subject.getVolume());
                                        preparedStatement.setString(5, subject.getDescription());
                                        
                                     
                                        
                                        ResultSet rs = preparedStatement.executeQuery();
                                        
                                        //creating arraylist of subjects
                                        ArrayList<Subject> result = new ArrayList<Subject>();
                                        
                                         while(rs.next())
                                        {
                                                String cin = rs.getString("cin");
                                                String description = rs.getString("wording");
                                                int level = rs.getInt("level");
                                                int volume = rs.getInt("workingHours");    
                                                int fieldId = rs.getInt("field_id");
                                              
                                                Subject newSubject = new Subject(cin, description, volume, level, fieldId);
                                                result.add(newSubject);
                                        }
                                         //informing the client that the querry has been fetched successfully and that the data is coming on the stream
                                        out.writeObject("ok-");
                                        //sending data
                                        out.writeObject(result);
                                        
                                    }
                                     
                                    else if(request.equals("+remove_student"))
                                    {
                                        //remove student request
                                        
                                        //recieving the student
                                        Student student = (Student) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        //setting the querry
                                        String querry = "DELETE FROM `student` WHERE `inscriptionNum`=?;";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, student.getInscriptionNum());
                                     
                                       
                                         int result = preparedStatement.executeUpdate();
                                         if(result >0)
                                         {
                                             //informing the client that the student has been removed successfully
                                             out.writeObject("ok-");
                                             
                                               String filePath =null;
                                               //recieving the picture name
                                                  String fileName = student.getInscriptionNum();
                                                  //searching for students picture to delete
                                                for(int i=0;i<3;i++)
                                                    if(i==0)
                                                    {
                                                        filePath = "imgs/"+fileName+".jpg";
                                                         if(new File(filePath).exists())
                                                             break;

                                                    }else if(i == 1)
                                                    {
                                                        filePath = "imgs/"+fileName+".png";
                                                         if(new File(filePath).exists())
                                                             break;
                                                    }else if(i == 2)
                                                    {
                                                         filePath=null;
                                                    }
                                                if(filePath!=null)
                                                    new File(filePath).delete();
                                         }
                                             else
                                             //informing the client that no student found with the provided infromations
                                             out.writeObject("no_student_removed-");
                                       
                                        
                                        
                                    }
                                    
                                      else if(request.equals("+remove_teacher"))
                                    {
                                        //remove teacher request
                                        
                                        //recieving the teacher
                                        Teacher teacher = (Teacher) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        //setting the querry
                                        String querry = "DELETE FROM `teacher` WHERE `cin`=?;";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, teacher.getCin());
                                     
                                       
                                         int result = preparedStatement.executeUpdate();
                                         if(result >0)
                                         {
                                             //informing the client that the teacher has been removed successfully
                                             out.writeObject("ok-");
                                               String filePath =null;
                                               //recieving picture name
                                                  String fileName = teacher.getCin();
                                                  //searching teacher's picture to remove
                                                for(int i=0;i<3;i++)
                                                    if(i==0)
                                                    {
                                                        filePath = "imgs/"+fileName+".jpg";
                                                         if(new File(filePath).exists())
                                                             break;

                                                    }else if(i == 1)
                                                    {
                                                        filePath = "imgs/"+fileName+".png";
                                                         if(new File(filePath).exists())
                                                             break;
                                                    }else if(i == 2)
                                                    {
                                                         filePath=null;
                                                    }
                                                if(filePath!=null)
                                                    new File(filePath).delete();
                                         }
                                             else
                                             //informing the client that no teacher found with the provided infromations 
                                             out.writeObject("no_teacher_removed-");
                                       
                                        
                                        
                                    }
                                    
                                    else if(request.equals("+remove_subject"))
                                    {
                                        //remove subject request
                                        
                                        //recieving the subject
                                        
                                        Subject subject = (Subject) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        //setting the querry
                                        String querry = "DELETE FROM `teaching` WHERE `cin`=? AND `field_id`=? AND `level`=? AND `wording`=?;";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, subject.getTeacherCin());
                                        preparedStatement.setInt(2, subject.getFieldId());
                                        preparedStatement.setInt(3, subject.getLevel());
                                        preparedStatement.setString(4, subject.getDescription());
                                     
                                       
                                         int result = preparedStatement.executeUpdate();
                                         if(result >0)
                                         {
                                             //informing the client that the subject has been removed successfully
                                           out.writeObject("ok-");
                                         }
                                             else
                                             //informing the client that no subject found with the provided infromations
                                             out.writeObject("no_subject_removed-");
                                       
                                        
                                        
                                    }  
                                    
                                      
                                    else if(request.equals("+edit_student"))
                                    {
                                        //edit student request
                                        
                                        //recieving the student
                                        Student student = (Student) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        //reciveing the student old inscription number
                                        String oldInscriptionNum = (String)in.readObject();
                                        //connected to database
                                        //setting the querry
                                        String querry = "UPDATE `student` SET `inscriptionNum`=?, `cin`=?,`lastName`=?,`firstName`=?,"
                                                + "`email`=?,`address`=?,`level`=?,`phoneNum`=?,`gender`=?,`field_id`=?,`birthDate`=? , `hasPic`=? WHERE `inscriptionNum`=?";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, student.getInscriptionNum());
                                        preparedStatement.setString(2, student.getCin());
                                        preparedStatement.setString(3, student.getLastName());
                                        preparedStatement.setString(4, student.getFirstName());
                                        preparedStatement.setString(5, student.getEmail());
                                        preparedStatement.setString(6, student.getAddress());
                                        
                                        preparedStatement.setInt(7,student.getLevel());
                                         preparedStatement.setInt(10,student.getFieldId());
                                        preparedStatement.setString(8,student.getPhoneNum());
                                        preparedStatement.setInt(9,student.getGender());
                                        preparedStatement.setString(11,student.getBirthDate());
                                        preparedStatement.setInt(12,((student.isHasPic())?1:0));
                                        preparedStatement.setString(13,oldInscriptionNum);
                                 
                                       
                                         int result = preparedStatement.executeUpdate();
                                         if(result >0)
                                         {
                                             //informing the client that the student has been edited successfully
                                             out.writeObject("ok-");
                                             //checking the the student uploaded picture
                                             if(student.isHasPic())
                                            {
                                                 String filePath =null;
                                                 //recieving the picture's naùe
                                                  String fileName = student.getInscriptionNum();
                                                  //searching for old student picture 
                                                for(int i=0;i<3;i++)
                                                    if(i==0)
                                                    {
                                                        filePath = "imgs/"+fileName+".jpg";
                                                         if(new File(filePath).exists())
                                                             break;

                                                    }else if(i == 1)
                                                    {
                                                        filePath = "imgs/"+fileName+".png";
                                                         if(new File(filePath).exists())
                                                             break;
                                                    }else if(i == 2)
                                                    {
                                                         filePath=null;
                                                    }
                              
                                       //recieving the new picture
                                          ImageIcon img = (ImageIcon) in.readObject();
                                          //recieving the picture's extension
                                        String extension = (String)in.readObject();
                                        //delete any old picture with different extension
                                        if(filePath!=null && !filePath.substring(filePath.lastIndexOf(".")).equals(extension))        
                                            new File(filePath).delete();
                                        //setting picture's relative path
                                        fileName = "imgs/"+fileName+extension;         
                                        
                                        //creating empty bufferdImage with the picture's dimension
                                        BufferedImage bufferedImage = new BufferedImage(img.getImage().getWidth(null), img.getImage().getHeight(null), BufferedImage.TYPE_INT_RGB);
                                        //getting the bufferedImage graphic
                                    Graphics g = bufferedImage.getGraphics();
                                    //writing the pictures bytes into the bufferedImage graphic
                                    g.drawImage(img.getImage(), 0, 0, null);
                                    
                                    g.dispose();
//writing the bufferedImage bytes into the picture file
                                    ImageIO.write(bufferedImage, extension.substring(1), new File(fileName));
                                        //informing the client that the picture has been saved 
                                        out.writeObject("pic_recieved-");   
                                       
                                          }else
                                             {
                                                   String filePath =null;
                                                   //getting picture's name
                                                  String fileName = student.getInscriptionNum();
                                                  //searching for old picture and removing it
                                                for(int i=0;i<3;i++)
                                                    if(i==0)
                                                    {
                                                        filePath = "imgs/"+fileName+".jpg";
                                                         if(new File(filePath).exists())
                                                             break;

                                                    }else if(i == 1)
                                                    {
                                                        filePath = "imgs/"+fileName+".png";
                                                         if(new File(filePath).exists())
                                                             break;
                                                    }else if(i == 2)
                                                    {
                                                         filePath=null;
                                                    }
                                                if(filePath!=null)
                                                    new File(filePath).delete();
                                             }
                                         }
                                         else
                                             //informing the client that no student found with the provided infromations
                                             out.writeObject("no_student_edited-");

                                    }
                                    
                                     else if(request.equals("+edit_teacher"))
                                    {
                                        //edit teacher request
                                        
                                        //recieving the teacher
                                        Teacher teacher = (Teacher) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        String oldCin = (String)in.readObject();
                                        //connected to database
                                        String querry = "UPDATE `teacher` SET `cin`=?,`lastName`=?,`firstName`=?,"
                                                + "`email`=?,`address`=?,`phoneNum`=?,`gender`=?,`birthDate`=? , `hasPic`=? WHERE `cin`=?";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, teacher.getCin());
                                        preparedStatement.setString(2, teacher.getLastName());
                                        preparedStatement.setString(3, teacher.getFirstName());
                                        preparedStatement.setString(4, teacher.getEmail());
                                        preparedStatement.setString(5, teacher.getAddress());

                                        preparedStatement.setString(6,teacher.getPhoneNum());
                                        preparedStatement.setInt(7,teacher.getGender());
                                        preparedStatement.setString(8,teacher.getBirthDate());
                                        preparedStatement.setInt(9,((teacher.isHasPic())?1:0));
                                        preparedStatement.setString(10,oldCin);
                                                        
                                       
                                         int result = preparedStatement.executeUpdate();
                                         if(result >0)
                                         {
                                             out.writeObject("ok-");
                                             if(teacher.isHasPic())
                                            {
                                                 String filePath =null;
                                                  String fileName = teacher.getCin();
                                                for(int i=0;i<3;i++)
                                                    if(i==0)
                                                    {
                                                        filePath = "imgs/"+fileName+".jpg";
                                                         if(new File(filePath).exists())
                                                             break;

                                                    }else if(i == 1)
                                                    {
                                                        filePath = "imgs/"+fileName+".png";
                                                         if(new File(filePath).exists())
                                                             break;
                                                    }else if(i == 2)
                                                    {
                                                         filePath=null;
                                                    }
                              
                                       
                                          ImageIcon img = (ImageIcon) in.readObject();
                                        String extension = (String)in.readObject();
                                        if(filePath!=null && !filePath.substring(filePath.lastIndexOf(".")).equals(extension))        
                                            new File(filePath).delete();
                                        fileName = "imgs/"+fileName+extension;         
                                        
                                        BufferedImage bufferedImage = new BufferedImage(img.getImage().getWidth(null), img.getImage().getHeight(null), BufferedImage.TYPE_INT_RGB);

                                    Graphics g = bufferedImage.getGraphics();
                                    g.drawImage(img.getImage(), 0, 0, null);
                                    g.dispose();

                                    ImageIO.write(bufferedImage, extension.substring(1), new File(fileName));
                                        
                                        out.writeObject("pic_recieved-");   
                                       
                                          }else
                                             {
                                                   String filePath =null;
                                                  String fileName = teacher.getCin();
                                                for(int i=0;i<3;i++)
                                                    if(i==0)
                                                    {
                                                        filePath = "imgs/"+fileName+".jpg";
                                                         if(new File(filePath).exists())
                                                             break;

                                                    }else if(i == 1)
                                                    {
                                                        filePath = "imgs/"+fileName+".png";
                                                         if(new File(filePath).exists())
                                                             break;
                                                    }else if(i == 2)
                                                    {
                                                         filePath=null;
                                                    }
                                                if(filePath!=null)
                                                    new File(filePath).delete();
                                             }
                                         }
                                         else
                                             out.writeObject("no_teacher_edited-");

                                    }
                                    
                                     else if(request.equals("+edit_subject"))
                                    {
                                        //show students request
                                        
                                        //recieving the student
                                        Subject subject = (Subject) in.readObject();
                                        
                                        //recieving the user
                                        User user = (User)in.readObject();
                                        
                                        //connecting to database
                                        conn = connect(user);
                                        Subject oldSubject = (Subject)in.readObject();
                                        //connected to database
                                        String querry = "UPDATE `teaching` SET `cin`=?,`field_id`=?,`level`=?,"
                                                + "`workingHours`=?,`wording`=? WHERE `wording`=? AND `cin`=? AND `field_id`=? AND `level`=?";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1, subject.getTeacherCin());
                                        preparedStatement.setInt(2, subject.getFieldId());
                                        preparedStatement.setInt(3, subject.getLevel());
                                         preparedStatement.setInt(4, subject.getVolume());
                                         preparedStatement.setString(5, subject.getDescription());
                                          preparedStatement.setString(6,oldSubject.getDescription());
                                            preparedStatement.setString(7,oldSubject.getTeacherCin());
                                               preparedStatement.setInt(8,oldSubject.getFieldId());
                                               preparedStatement.setInt(9,oldSubject.getLevel());
                                                                                          
                                       
                                         int result = preparedStatement.executeUpdate();
                                         if(result >0)
                                         {
                                             out.writeObject("ok-");
                                            
                                             
                                         }
                                         else
                                             out.writeObject("no_subject_edited-");

                                    }
                                     
                                    else if(request.equals("+get_student_pic"))
                                    {
                                        //show students request
                                        
                                        //recieving the student
                                        String inscNum = (String) in.readObject();
                                         String filePath =null;
                                        for(int i=0;i<3;i++)
                                            if(i==0)
                                            {
                                                filePath = "imgs/"+inscNum+".jpg";
                                                 if(new File(filePath).exists())
                                                     break;
                                                     
                                            }else if(i == 1)
                                            {
                                                filePath = "imgs/"+inscNum+".png";
                                                 if(new File(filePath).exists())
                                                     break;
                                            }else if(i == 2)
                                            {
                                                 filePath=null;
                                            }
   
                                        if(filePath!=null)
                                        {
                                         ImageIcon img = new ImageIcon(filePath);
                                         out.writeObject("ok-");
                                         out.writeObject(img);
                                        }else
                                        {
                                            out.writeObject("err-");
                                            setText("picture : "+inscNum+" not found , make sure that the folder 'imgs' is safe .");
                                        }

                                    }
                                    
                                     else if(request.equals("+get_teacher_pic"))
                                    {
                                        //show students request
                                        
                                        //recieving the student
                                        String cin = (String) in.readObject();
                                         String filePath =null;
                                        for(int i=0;i<3;i++)
                                            if(i==0)
                                            {
                                                filePath = "imgs/"+cin+".jpg";
                                                 if(new File(filePath).exists())
                                                     break;
                                                     
                                            }else if(i == 1)
                                            {
                                                filePath = "imgs/"+cin+".png";
                                                 if(new File(filePath).exists())
                                                     break;
                                            }else if(i == 2)
                                            {
                                                 filePath=null;
                                            }
   
                                        if(filePath!=null)
                                        {
                                         ImageIcon img = new ImageIcon(filePath);
                                         out.writeObject("ok-");
                                         out.writeObject(img);
                                        }else
                                        {
                                            out.writeObject("err-");
                                            setText("picture : "+cin+" not found , make sure that the folder 'imgs' is safe .");
                                        }

                                    }
                                    
                                     else if(request.equals("+get_count"))
                                     {
                                          
                                        User user =(User)in.readObject();
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        String  querry = "SELECT COUNT(*) AS 'subjectCount' FROM `teaching`;";
                                        Statement statement = conn.createStatement();
                                        ResultSet rs = statement.executeQuery(querry);
                                        int subjectCount =0;
                                        if(rs.next())
                                            subjectCount=rs.getInt("subjectCount");
                                        
                                          querry = "SELECT COUNT(*) AS 'studentCount' FROM `student`;";
                                         statement = conn.createStatement();
                                         rs = statement.executeQuery(querry);
                                        int studentCount =0;
                                        if(rs.next())
                                            studentCount=rs.getInt("studentCount");
                                        
                                          querry = "SELECT COUNT(*) AS 'teacherCount' FROM `teacher`;";
                                         statement = conn.createStatement();
                                         rs = statement.executeQuery(querry);
                                        int teacherCount =0;
                                        if(rs.next())
                                            teacherCount=rs.getInt("teacherCount");
                                        
                                          querry = "SELECT COUNT(*) AS 'fieldCount' FROM `field`;";
                                         statement = conn.createStatement();
                                         rs = statement.executeQuery(querry);
                                        int fieldCount =0;
                                        if(rs.next())
                                            fieldCount=rs.getInt("fieldCount");
                                        
                                        Home home = new Home(studentCount, teacherCount, fieldCount, subjectCount);
                                        out.writeObject("ok-");
                                        out.writeObject(home);
                                     }
                                     else if(request.equals("+get_student_subjects"))
                                     {
                                        Student student = (Student) in.readObject();
                                        User user =(User)in.readObject();
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        String  querry = "SELECT `cin`, `wording` , `workingHours` FROM `teaching`WHERE `field_id`=? AND `level`=?;";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setInt(1,student.getFieldId());
                                        preparedStatement.setInt(2,student.getLevel());
                                        
                                        ResultSet rs = preparedStatement.executeQuery();
                                        
                                         ArrayList<Subject> result = new ArrayList<Subject>();
                                        while(rs.next())
                                        {
                                            Subject newSubject = new Subject(rs.getString("cin"),rs.getString("wording"),rs.getInt("workingHours"), student.getLevel(), student.getFieldId());
                                            result.add(newSubject);
                                        }
                                        out.writeObject("ok-");
                                        out.writeObject(result);
                                     }
                                      else if(request.equals("+get_teacher_subjects"))
                                     {
                                        Teacher teacher = (Teacher) in.readObject();
                                        User user =(User)in.readObject();
                                        //connecting to database
                                        conn = connect(user);
                                        
                                        //connected to database
                                        String  querry = "SELECT  `wording` , `field_id`, `level` , `workingHours` FROM `teaching`WHERE `cin`=?;";
                                        PreparedStatement preparedStatement = conn.prepareStatement(querry);
                                        preparedStatement.setString(1,teacher.getCin());
                                  
                                        
                                        
                                        ResultSet rs = preparedStatement.executeQuery();
                                        
                                         ArrayList<Subject> result = new ArrayList<Subject>();
                                        while(rs.next())
                                        {
                                            Subject newSubject = new Subject(null,rs.getString("wording"),rs.getInt("workingHours"),rs.getInt("level") , rs.getInt("field_id"));
                                            result.add(newSubject);
                                        }
                                        out.writeObject("ok-");
                                        out.writeObject(result);
                                     }
                                    
                                    
                            } catch (IOException ex) {
                                setText(ex.getMessage());
                                try {
                                            out.writeObject("IO_err-");
                                        } catch (IOException ex1) {
                                           setText(ex1.getMessage());
                                        }
                            }catch (ClassNotFoundException ex) {
                                setText(ex.getMessage());
                                try {
                                            out.writeObject("CNF_err-");
                                        } catch (IOException ex1) {
                                            setText(ex1.getMessage());
                                        }
                                    
                                }
                            catch(SQLException ex)
                            {
                                 setText(ex.getMessage());
                                        try {
                                            out.writeObject("SQL_err-");
                                        } catch (IOException ex1) {
                                            setText(ex1.getMessage());
                                        }
                                       
                            }
                             catch(Exception ex)
                                        {
                                            setText(ex.getMessage());
                                        }
                            finally
                            {
                                    try {
                                        closeConnection();
                                    } catch (SQLException ex) {
                                      setText(ex.getMessage());
                                    } catch (IOException ex) {
                                        setText(ex.getMessage());
                                    }
                            }
                        }
                    }).start();
                  setText("Client "+hostIp+" disconnected on "+LocalDateTime.now());;
                }
                       
                
            } catch (IOException ex) {
                if(isStarted)
                {
                    new MainFrame();
                    new Message_Dialog("Port "+PORT+" is already in use .");
                    dispose();
                }
                else
                     setText("Server stopped at "+LocalDateTime.now());
            }
               }
           }).start();
        }else
        {
           onlineDB.setEnabled(true);
            try {
                isStarted=false;
                setInvisibility();
                onlineDBMouseClicked(evt);
                serverSocket.close();
                 startBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
            } catch (IOException ex) {
                 setText(ex.getMessage());
            }
        }
     
    }//GEN-LAST:event_startBtnMousePressed

    private void exportBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportBtnMouseClicked
        // TODO add your handling code here:
         File log=new File("server_log.txt");
        try {
            FileWriter writer = new FileWriter(log);
            writer.write(logTA.getText());
            writer.close();
           new Message_Dialog("Logs has been saved succesfully as server_log.txt .");
        }catch(IOException ex)
        {
            new Message_Dialog("something went wrong when export the log file .");
        }
    }//GEN-LAST:event_exportBtnMouseClicked

    private void startBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_startBtnMouseClicked

    private void onlineDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineDBActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_onlineDBActionPerformed

    private void onlineDBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onlineDBMouseClicked
        // TODO add your handling code here:
        if(!onlineDB.isSelected())
        {
           ipEnabled(true);
            
        }else
        {
             ipEnabled(false);
        }
    }//GEN-LAST:event_onlineDBMouseClicked

    private void ipEnabled(boolean state)
    {
         ipByte1.setEnabled(state);
            ipByte2.setEnabled(state);
            ipByte3.setEnabled(state);
            ipByte4.setEnabled(state);
    }
    
   private void setText(String txt)
   {
       logTA.append("# "+txt+"\n");
   }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private void closeConnection() throws SQLException,IOException
    {
        if(conn!=null)
        conn.close();
        if(in!=null )
        in.close();
        if(out!=null)
        out.close();
    }
    
     private Connection connect(User user) throws ClassNotFoundException ,SQLException
    {
         //establishing connection to DB
                Class.forName(DRIVER);
                URL="jdbc:mysql://"+DB_SERVER_IP+":3306/"+DB_NAME;
                return  conn = DriverManager.getConnection(URL, user.getUsername(), user.getPassword()); 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel closeBtn;
    private javax.swing.JButton exportBtn;
    private javax.swing.JLabel exportLabel;
    private javax.swing.JLabel frameLabel;
    private javax.swing.JSpinner ipByte1;
    private javax.swing.JSpinner ipByte2;
    private javax.swing.JSpinner ipByte3;
    private javax.swing.JSpinner ipByte4;
    private javax.swing.JLabel ip_icon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea logTA;
    private javax.swing.JLabel minimizeBtn;
    private javax.swing.JCheckBox onlineDB;
    private javax.swing.JPanel rootPanel;
    private javax.swing.JLabel startBtn;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
    private Point mousePosition;
    private String ip;
    private boolean isStarted = false;
    private ServerSocket serverSocket;

    private static final int PORT =1234;
    private static Connection conn = null;
    private static final String DRIVER = "com.mysql.cj.jdbc.Driver" ;
    private static  String DB_SERVER_IP = "remotemysql.com";
    private static String ONLINE_DB_NAME = "wa2GCs0VOh";
    private static  String DB_NAME = ONLINE_DB_NAME;
    private static  String URL ;
    private ObjectInputStream in=null;
    private ObjectOutputStream out=null;
   
}
