/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package App_Frames;

import App_Exceptions.*;
import Dialogs.Message_Dialog;
import Models.*;
import java.awt.FlowLayout;
import java.awt.Image;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/**
 *
 * @author amir,chedi,nour
 */
public class TeacherPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentPanel
     */
    public TeacherPanel(String server_ip,int PORT,User user) {
        this.user = user;
        this.server_ip = server_ip;
        this.PORT = PORT;
        
        initComponents();
        refreshBtnMouseClicked(null);
        setInvisibilty() ;  
        initValues();
    }
    
    
    private void initValues()
    {
        picUploaded=false;
        picLabel.setIcon(null);
        dateBirthDC.setDate(null);
        resultTable.setRowSelectionAllowed(false);
        cinTF.setText("");
        firstNameTF.setText("");
        lastNameTF.setText("");
        phoneNumTF.setText("");
        addrTA.setText("");
        buttonGroup1.clearSelection();
       
        hostNameTF.setText("");
        domainNameTF.setText("");
        
        genderCB.setSelectedIndex(0);
       
    }
    
    private void setSelectedBtnVisibility(boolean isVisible)
{
     editBtn.setVisible(isVisible);
         removeButton.setVisible(isVisible);
         showSubjectBtn.setVisible(isVisible);

}

private void setUnselectedBtnVisibility(boolean isVisible)

{
    addButton.setVisible(isVisible);
}
    
     private void setInvisibilty()
     {
          setUnselectedBtnVisibility(true);
         setSelectedBtnVisibility(false);
 
         birthDateWarningLabel.setVisible(false);
      

       firstNameWarningLabel.setVisible(false);
       lastNameWarningLabel.setVisible(false); 

       cinWarningLabel.setVisible(false); 
       emailWarningLabel.setVisible(false); 
       phoneNumWarningLabel.setVisible(false);
       genderWarningLabel.setVisible(false);

        
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        tableScrollPane = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        studentAreaLabel = new javax.swing.JLabel();
        cinTF = new javax.swing.JTextField();
        firstNameTF = new javax.swing.JTextField();
        lastNameTF = new javax.swing.JTextField();
        domainNameTF = new javax.swing.JTextField();
        addressScrollPane = new javax.swing.JScrollPane();
        addrTA = new javax.swing.JTextArea();
        cinLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        addrLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        cinWarningLabel = new javax.swing.JLabel();
        firstNameWarningLabel = new javax.swing.JLabel();
        lastNameWarningLabel = new javax.swing.JLabel();
        emailWarningLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        atSignLabel = new javax.swing.JLabel();
        hostNameTF = new javax.swing.JTextField();
        phoneNumLabel = new javax.swing.JLabel();
        phoneNumTF = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        phoneNumWarningLabel = new javax.swing.JLabel();
        genderCB = new javax.swing.JComboBox();
        genderWarningLabel = new javax.swing.JLabel();
        export_icon = new javax.swing.JLabel();
        exportLabel = new javax.swing.JLabel();
        dateBirthDC = new com.toedter.calendar.JDateChooser();
        birthDateLabel = new javax.swing.JLabel();
        birthDateWarningLabel = new javax.swing.JLabel();
        importPicIcon = new javax.swing.JLabel();
        importPicLabel = new javax.swing.JLabel();
        picLabel = new javax.swing.JLabel();
        helpIcon = new javax.swing.JLabel();
        btnPanel = new javax.swing.JPanel();
        refreshBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        showButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        showSubjectBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(34, 40, 44));
        setMaximumSize(new java.awt.Dimension(884, 626));
        setPreferredSize(new java.awt.Dimension(884, 626));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(null);

        tableScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tableScrollPane.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableScrollPaneMouseClicked(evt);
            }
        });

        resultTable.setBackground(new java.awt.Color(64, 70, 74));
        resultTable.setForeground(new java.awt.Color(255, 255, 255));
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CIN", "First name", "Last name", "Phone", "Address", "Email", "Gender", "Birth date", "Picture"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.setFocusable(false);
        resultTable.setGridColor(new java.awt.Color(0, 0, 0));
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                resultTableMouseEntered(evt);
            }
        });
        tableScrollPane.setViewportView(resultTable);

        add(tableScrollPane);
        tableScrollPane.setBounds(0, 470, 900, 180);

        studentAreaLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        studentAreaLabel.setForeground(new java.awt.Color(144, 153, 164));
        studentAreaLabel.setText("Teacher Area");
        add(studentAreaLabel);
        studentAreaLabel.setBounds(20, 0, 160, 31);

        cinTF.setBackground(new java.awt.Color(34, 40, 44));
        cinTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cinTF.setForeground(new java.awt.Color(255, 255, 255));
        cinTF.setBorder(null);
        cinTF.setNextFocusableComponent(firstNameTF);
        cinTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cinTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cinTFFocusLost(evt);
            }
        });
        add(cinTF);
        cinTF.setBounds(160, 40, 180, 20);

        firstNameTF.setBackground(new java.awt.Color(34, 40, 44));
        firstNameTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        firstNameTF.setForeground(new java.awt.Color(255, 255, 255));
        firstNameTF.setBorder(null);
        firstNameTF.setNextFocusableComponent(lastNameTF);
        firstNameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firstNameTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstNameTFFocusLost(evt);
            }
        });
        add(firstNameTF);
        firstNameTF.setBounds(160, 150, 180, 20);

        lastNameTF.setBackground(new java.awt.Color(34, 40, 44));
        lastNameTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lastNameTF.setForeground(new java.awt.Color(255, 255, 255));
        lastNameTF.setBorder(null);
        lastNameTF.setNextFocusableComponent(phoneNumTF);
        lastNameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lastNameTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lastNameTFFocusLost(evt);
            }
        });
        add(lastNameTF);
        lastNameTF.setBounds(160, 250, 180, 20);

        domainNameTF.setBackground(new java.awt.Color(34, 40, 44));
        domainNameTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        domainNameTF.setForeground(new java.awt.Color(255, 255, 255));
        domainNameTF.setBorder(null);
        domainNameTF.setNextFocusableComponent(genderCB);
        domainNameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                domainNameTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                domainNameTFFocusLost(evt);
            }
        });
        add(domainNameTF);
        domainNameTF.setBounds(650, 340, 100, 20);

        addressScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addrTA.setBackground(new java.awt.Color(34, 40, 44));
        addrTA.setColumns(20);
        addrTA.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addrTA.setForeground(new java.awt.Color(255, 255, 255));
        addrTA.setLineWrap(true);
        addrTA.setRows(4);
        addrTA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addrTAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addrTAFocusLost(evt);
            }
        });
        addressScrollPane.setViewportView(addrTA);

        add(addressScrollPane);
        addressScrollPane.setBounds(530, 40, 180, 60);

        cinLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cinLabel.setForeground(new java.awt.Color(135, 137, 139));
        cinLabel.setText("CIN :");
        add(cinLabel);
        cinLabel.setBounds(20, 40, 40, 31);

        firstNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        firstNameLabel.setForeground(new java.awt.Color(135, 137, 139));
        firstNameLabel.setText("First name :");
        add(firstNameLabel);
        firstNameLabel.setBounds(20, 140, 90, 31);

        lastNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lastNameLabel.setForeground(new java.awt.Color(135, 137, 139));
        lastNameLabel.setText("Last name :");
        add(lastNameLabel);
        lastNameLabel.setBounds(20, 240, 90, 30);

        emailLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(135, 137, 139));
        emailLabel.setText("Email : ");
        add(emailLabel);
        emailLabel.setBounds(450, 340, 50, 31);

        addrLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addrLabel.setForeground(new java.awt.Color(135, 137, 139));
        addrLabel.setText("Address :");
        add(addrLabel);
        addrLabel.setBounds(450, 40, 70, 31);

        genderLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        genderLabel.setForeground(new java.awt.Color(135, 137, 139));
        genderLabel.setText("Gender :");
        add(genderLabel);
        genderLabel.setBounds(450, 150, 60, 26);

        cinWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        cinWarningLabel.setText("* CIN must have 8 digits");
        add(cinWarningLabel);
        cinWarningLabel.setBounds(160, 70, 150, 16);
        cinWarningLabel.setVisible(false);

        firstNameWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        firstNameWarningLabel.setText("* First name must be formed by letters");
        add(firstNameWarningLabel);
        firstNameWarningLabel.setBounds(160, 180, 240, 16);

        lastNameWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        lastNameWarningLabel.setText("* Last name must be formed by letters");
        add(lastNameWarningLabel);
        lastNameWarningLabel.setBounds(160, 280, 260, 16);

        emailWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        emailWarningLabel.setText("* Email must be formed by alphanumerics and one ( . , - , _ )");
        add(emailWarningLabel);
        emailWarningLabel.setBounds(530, 360, 360, 30);
        add(jSeparator1);
        jSeparator1.setBounds(160, 270, 180, 10);
        add(jSeparator3);
        jSeparator3.setBounds(160, 60, 180, 10);
        add(jSeparator4);
        jSeparator4.setBounds(530, 360, 220, 10);
        add(jSeparator5);
        jSeparator5.setBounds(160, 170, 180, 10);

        atSignLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        atSignLabel.setForeground(new java.awt.Color(95, 97, 99));
        atSignLabel.setText("@");
        add(atSignLabel);
        atSignLabel.setBounds(630, 340, 20, 20);

        hostNameTF.setBackground(new java.awt.Color(34, 40, 44));
        hostNameTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        hostNameTF.setForeground(new java.awt.Color(255, 255, 255));
        hostNameTF.setBorder(null);
        hostNameTF.setNextFocusableComponent(domainNameTF);
        hostNameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hostNameTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                hostNameTFFocusLost(evt);
            }
        });
        add(hostNameTF);
        hostNameTF.setBounds(530, 340, 100, 20);

        phoneNumLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        phoneNumLabel.setForeground(new java.awt.Color(135, 137, 139));
        phoneNumLabel.setText("Phone :");
        add(phoneNumLabel);
        phoneNumLabel.setBounds(20, 340, 60, 31);

        phoneNumTF.setBackground(new java.awt.Color(34, 40, 44));
        phoneNumTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        phoneNumTF.setForeground(new java.awt.Color(255, 255, 255));
        phoneNumTF.setBorder(null);
        phoneNumTF.setNextFocusableComponent(addrTA);
        phoneNumTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                phoneNumTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                phoneNumTFFocusLost(evt);
            }
        });
        add(phoneNumTF);
        phoneNumTF.setBounds(160, 340, 180, 20);
        add(jSeparator6);
        jSeparator6.setBounds(160, 360, 180, 10);

        phoneNumWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        phoneNumWarningLabel.setText("* Phone number must have 8 digits");
        add(phoneNumWarningLabel);
        phoneNumWarningLabel.setBounds(160, 370, 220, 16);

        genderCB.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        genderCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chose your gender", "Male", "Female" }));
        genderCB.setNextFocusableComponent(dateBirthDC);
        genderCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                genderCBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                genderCBFocusLost(evt);
            }
        });
        genderCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                genderCBMouseClicked(evt);
            }
        });
        add(genderCB);
        genderCB.setBounds(530, 150, 180, 21);

        genderWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        genderWarningLabel.setText("* Select a gender ");
        add(genderWarningLabel);
        genderWarningLabel.setBounds(530, 180, 160, 16);
        genderWarningLabel.setVisible(false);

        export_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-microsoft-excel-40.png"))); // NOI18N
        export_icon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        export_icon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                export_iconMouseClicked(evt);
            }
        });
        add(export_icon);
        export_icon.setBounds(10, 420, 40, 50);

        exportLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        exportLabel.setForeground(new java.awt.Color(144, 153, 164));
        exportLabel.setText("export to Google sheet");
        add(exportLabel);
        exportLabel.setBounds(50, 440, 170, 16);

        dateBirthDC.setDateFormatString("yyyy-MM-dd");
        dateBirthDC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dateBirthDCFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateBirthDCFocusLost(evt);
            }
        });
        dateBirthDC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dateBirthDCMouseClicked(evt);
            }
        });
        add(dateBirthDC);
        dateBirthDC.setBounds(530, 250, 180, 22);

        birthDateLabel.setForeground(new java.awt.Color(135, 137, 139));
        birthDateLabel.setText("Birth date :");
        add(birthDateLabel);
        birthDateLabel.setBounds(450, 250, 70, 30);

        birthDateWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        birthDateWarningLabel.setText("* Enter a valid date");
        add(birthDateWarningLabel);
        birthDateWarningLabel.setBounds(530, 280, 130, 16);

        importPicIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-camera-40.png"))); // NOI18N
        importPicIcon.setText("jLabel1");
        importPicIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        importPicIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importPicIconMouseClicked(evt);
            }
        });
        add(importPicIcon);
        importPicIcon.setBounds(240, 430, 40, 30);

        importPicLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        importPicLabel.setForeground(new java.awt.Color(144, 153, 164));
        importPicLabel.setText("upload picture");
        add(importPicLabel);
        importPicLabel.setBounds(290, 440, 110, 17);
        add(picLabel);
        picLabel.setBounds(730, 10, 160, 170);

        helpIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-help-20.png"))); // NOI18N
        helpIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        helpIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpIconMouseClicked(evt);
            }
        });
        add(helpIcon);
        helpIcon.setBounds(180, 0, 20, 30);

        btnPanel.setBackground(new java.awt.Color(34, 40, 44));
        btnPanel.setForeground(new java.awt.Color(34, 40, 44));

        refreshBtn.setBackground(new java.awt.Color(33, 35, 35));
        refreshBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        refreshBtn.setForeground(new java.awt.Color(255, 255, 255));
        refreshBtn.setText("Refresh");
        refreshBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        refreshBtn.setBorderPainted(false);
        refreshBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        refreshBtn.setIconTextGap(0);
        refreshBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshBtnMouseClicked(evt);
            }
        });
        btnPanel.add(refreshBtn);

        editBtn.setBackground(new java.awt.Color(33, 35, 35));
        editBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        editBtn.setForeground(new java.awt.Color(255, 255, 255));
        editBtn.setText("Edit");
        editBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        editBtn.setBorderPainted(false);
        editBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editBtnMouseClicked(evt);
            }
        });
        btnPanel.add(editBtn);

        showButton.setBackground(new java.awt.Color(33, 35, 35));
        showButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        showButton.setForeground(new java.awt.Color(255, 255, 255));
        showButton.setText("Search");
        showButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        showButton.setBorderPainted(false);
        showButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        showButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showButtonMouseClicked(evt);
            }
        });
        btnPanel.add(showButton);

        addButton.setBackground(new java.awt.Color(33, 35, 35));
        addButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add");
        addButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addButton.setBorderPainted(false);
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addButtonMouseEntered(evt);
            }
        });
        btnPanel.add(addButton);

        removeButton.setBackground(new java.awt.Color(33, 35, 35));
        removeButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("Remove");
        removeButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        removeButton.setBorderPainted(false);
        removeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeButtonMouseClicked(evt);
            }
        });
        btnPanel.add(removeButton);

        showSubjectBtn.setBackground(new java.awt.Color(33, 35, 35));
        showSubjectBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        showSubjectBtn.setForeground(new java.awt.Color(255, 255, 255));
        showSubjectBtn.setText("Show subjects");
        showSubjectBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        showSubjectBtn.setBorderPainted(false);
        showSubjectBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        showSubjectBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showSubjectBtnMouseClicked(evt);
            }
        });
        btnPanel.add(showSubjectBtn);

        cancelBtn.setBackground(new java.awt.Color(33, 35, 35));
        cancelBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cancelBtn.setForeground(new java.awt.Color(255, 255, 255));
        cancelBtn.setText("Reset");
        cancelBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cancelBtn.setBorderPainted(false);
        cancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });
        btnPanel.add(cancelBtn);

        btnPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));

        add(btnPanel);
        btnPanel.setBounds(460, 430, 440, 30);
    }// </editor-fold>//GEN-END:initComponents
     
    private void cinTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cinTFFocusGained
        // TODO add your handling code here:
          cinWarningLabel.setVisible(false);
        cinLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_cinTFFocusGained

    private void cinTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cinTFFocusLost
        // TODO add your handling code here:
          cinLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_cinTFFocusLost

    private void firstNameTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameTFFocusGained
        // TODO add your handling code here:
          firstNameWarningLabel.setVisible(false);
        firstNameLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_firstNameTFFocusGained

    private void firstNameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameTFFocusLost
        // TODO add your handling code here:
         firstNameLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_firstNameTFFocusLost

    private void lastNameTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastNameTFFocusGained
        // TODO add your handling code here:
          lastNameWarningLabel.setVisible(false);
        lastNameLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lastNameTFFocusGained

    private void lastNameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastNameTFFocusLost
        // TODO add your handling code here:
         lastNameLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lastNameTFFocusLost

    private void addrTAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addrTAFocusGained
        // TODO add your handling code here:
        addrLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_addrTAFocusGained

    private void addrTAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addrTAFocusLost
        // TODO add your handling code here:
         addrLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_addrTAFocusLost

    private void domainNameTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_domainNameTFFocusGained
        // TODO add your handling code here:
         emailWarningLabel.setVisible(false);
        emailLabel.setForeground(new java.awt.Color(57,113,177));
        atSignLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_domainNameTFFocusGained

    private void domainNameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_domainNameTFFocusLost
        // TODO add your handling code here:
        emailLabel.setForeground(new java.awt.Color(95,97,99));
          atSignLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_domainNameTFFocusLost

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        // TODO add your handling code here:
       
         //  refreshBtnMouseClicked(null);
             
             //creating new thread
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {
                          
                            //new Student data is valid
                             Teacher newTeacher = validateData();
                             if(result.contains(newTeacher))
                                throw new DuplicatedTeacherException();
                            String fileName = newTeacher.getFileName();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+add_teacher");//undecating to server that it's a adding studnet request
                            out.writeObject(newTeacher);
                            out.writeObject(user);     //providing the student to the server
                           
                                
                              
                           
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                  
                                new Message_Dialog("Teacher "+newTeacher.getFirstName()+" "+newTeacher.getLastName()+" added to database successfully .");
                                if(newTeacher.isHasPic())
                                {
                                       ImageIcon img = new ImageIcon(fileName);
                                       out.writeObject(img);
                                       String extension = fileName.substring(fileName.lastIndexOf("."));
                                       out.writeObject(extension);
                                        response = (String) in.readObject();
                                        
                                        if(response.equals("pic_recieved-"))
                                        {
                                            
                                        }else if(response.equals("err-"))
                                        {
                                            new Message_Dialog("something went wrong when sending the image .");
                                        }else
                                        {
                                            new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                                        }
                                            }      
                                                refreshBtnMouseClicked(null);
                                                cancelBtnMouseClicked(null);
                                                
                              
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An error has occuried during the adding process , please check the servers log files");
                            }
                                else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                              new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }
                        catch(InvalidCinException ex)
                        {
                            cinWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidNomException ex )
                        {
                            firstNameWarningLabel.setVisible(true) ;
                        }catch(InvalidPrenomException ex )
                        {
                            lastNameWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidEmailException ex )
                        {
                            emailWarningLabel.setVisible(true);
                        }catch(InvalidPhoneNumException ex)
                        {
                            phoneNumWarningLabel.setVisible(true);
                        }catch(InvalidGenderException ex)
                        {
                            genderWarningLabel.setVisible(true);
                        } catch (InvalidDateException ex) {
                            birthDateWarningLabel.setVisible(true);
                        } catch (DuplicatedTeacherException ex) {
                             new Message_Dialog("Unable to add the teacher : CIN must be unique .");
                        }



                    }
                }).start();
             
            
        
    }//GEN-LAST:event_addButtonMouseClicked

    private Teacher validateData() throws InvalidCinException, InvalidNomException, InvalidPrenomException, InvalidPhoneNumException, InvalidEmailException, InvalidGenderException, InvalidDateException
    {
                            String cin = verifCinPhone(cinTF.getText().trim(),0);
                            String firstName = verifnom(firstNameTF.getText().trim());
                            String lastName = verifprenom(lastNameTF.getText().trim() );
                            String phoneNum = verifCinPhone(phoneNumTF.getText().trim(),1);
                            String address = addrTA.getText().trim();
                            int  gender = isGenderSelected();
                            String birthDate = isValidDate();
                            String email = verifemail(hostNameTF.getText().trim(),domainNameTF.getText().trim()) ; 
                            
                            
                            
                            boolean hasPic = picUploaded;
                             
                            
                            
                            //new Student data is valid
                            Teacher newTeacher= new Teacher(cin, firstName, lastName, email, address, phoneNum, gender,birthDate,hasPic);
                            newTeacher.setFileName(fileName);
                            
                            return newTeacher;
    }
    
   private String isValidDate() throws InvalidDateException
    {
         if(dateBirthDC.getDate()!=null)
                            {
                               
                            DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                            String date = format.format(dateBirthDC.getDate());
                            String resultDate = date;
                            String now = format.format(new Date());
                            
                            int yearNow=Integer.parseInt(now.substring(0,now.indexOf("-")));
                            int yearDate = Integer.parseInt(date.substring(0,now.indexOf("-")));
                            
                            if(yearDate>yearNow)
                                throw new InvalidDateException();
                            else if(yearDate<yearNow)
                            {
                                birthDateWarningLabel.setVisible(false);
                                 return resultDate;
                            }
                            else
                            {
                            now = now.substring(now.indexOf("-")+1);
                            date = date.substring(date.indexOf("-")+1);
                            
                            int monthNow=Integer.parseInt(now.substring(0,now.indexOf("-")));
                            int monthDate = Integer.parseInt(date.substring(0,now.indexOf("-")));
                            if(monthDate>monthNow)
                                 throw new InvalidDateException();
                            else if(monthDate<monthNow)
                                 {
                                birthDateWarningLabel.setVisible(false);
                                 return resultDate;
                            }
                            
                            else
                            {
                            now = now.substring(now.indexOf("-")+1);
                            date = date.substring(date.indexOf("-")+1);
                            
                             int dayNow=Integer.parseInt(now);
                            int dayDate = Integer.parseInt(date);
                            
                           
                            if(dayDate>=dayNow)
                                throw new InvalidDateException();
                            else
                                 {
                                birthDateWarningLabel.setVisible(false);
                                 return resultDate;
                            }
                           
                            }
            
                            }   
                            }else
                                throw new InvalidDateException();
         
    }
    
    
    private void hostNameTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostNameTFFocusGained
        // TODO add your handling code here:
          emailWarningLabel.setVisible(false);
        emailLabel.setForeground(new java.awt.Color(57,113,177));
        atSignLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_hostNameTFFocusGained

    private void hostNameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostNameTFFocusLost
        // TODO add your handling code here:
            emailLabel.setForeground(new java.awt.Color(95,97,99));
             atSignLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_hostNameTFFocusLost

    private void phoneNumTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneNumTFFocusGained
        // TODO add your handling code here:
        phoneNumWarningLabel.setVisible(false);
        phoneNumLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_phoneNumTFFocusGained

    private void phoneNumTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneNumTFFocusLost
        // TODO add your handling code here:
         phoneNumLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_phoneNumTFFocusLost

    private void genderCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_genderCBFocusGained
        // TODO add your handling code here:
        genderLabel.setForeground(new java.awt.Color(57,113,177));
        genderWarningLabel.setVisible(false);
    }//GEN-LAST:event_genderCBFocusGained

    private void genderCBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_genderCBFocusLost
        // TODO add your handling code here:
         genderLabel.setForeground(new java.awt.Color(95,97,99));
           if(genderCB.getSelectedIndex()==1)
         {
             picLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-man-teacher-100.png")));
    
         }else if(genderCB.getSelectedIndex()==2)
         {
         picLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-woman-teacher-100.png")));
         }
      
    }//GEN-LAST:event_genderCBFocusLost

    private void refreshBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshBtnMouseClicked
        // TODO add your handling code here:
        
        new Thread(new Runnable() {

            @Override
            public void run() {
                
                 try {

                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+show_all_teachers");//undecating to server that it's a show all studnets request
                            out.writeObject(user);     //providing the student to the server
                           //recieve the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                 //receving the response
                                  result = (ArrayList<Teacher>)in.readObject();
                                  addTeachersResultTable(result);
                                 // cancelBtnMouseClicked(null);
 
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An unknown error has occuried during the showing process , please check the servers log files");
                            }
                                else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                               new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        


                    }
                
            }
        }).start();
        
    }//GEN-LAST:event_refreshBtnMouseClicked

    private void addTeachersResultTable(Collection<Teacher> result)
    {
        resultTable.removeAll();
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        
        while(model.getRowCount()>0)
            model.removeRow(0);
        
                                Object row[] = new Object[9];
                                for(Teacher teacher : result)
                                {
                                    row[0] = teacher.getCin();
                                    row[1] = teacher.getFirstName();
                                    row[2] = teacher.getLastName();
                                    row[3] = teacher.getPhoneNum();
                                    row[4] = teacher.getAddress();
                                    row[5] = teacher.getEmail();
                                    row[6] = (teacher.getGender()==0)?"Male":"Female";
                                    row[7] = teacher.getBirthDate();
                                    row[8] = (teacher.isHasPic()==true)?"Yes":"No";
                                    model.addRow(row);
                                }
    }
    
    private void showButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showButtonMouseClicked
        // TODO add your handling code here:
        //creating new thread
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {

                            //new Student data is valid
                             Teacher newTeacher = getData();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+show_teachers");//undecating to server that it's a show students request
                            out.writeObject(newTeacher);//sending the student to server
                            out.writeObject(user);     //providing the student to the server
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                //recieving the data
                                Collection<Teacher> result =(ArrayList<Teacher>)in.readObject();
                                addTeachersResultTable(result);
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An unknown error has occuried during the showing process , please check the servers log files");
                            }
                                else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                               new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }


                    }
                }).start();
             
        
    }//GEN-LAST:event_showButtonMouseClicked

    private Teacher getData()
    {
      
                            String cin = cinTF.getText().trim();
                            String firstName = firstNameTF.getText().trim();
                            String lastName = lastNameTF.getText().trim();
                            String phoneNum = phoneNumTF.getText().trim();
                            String email = hostNameTF.getText().trim()+"@"+domainNameTF.getText().trim() ; 
                            int  gender = genderCB.getSelectedIndex()-1;
                            String address = addrTA.getText().trim();
                            String birthDate = (dateBirthDC.getDate()!=null)?new SimpleDateFormat("YYYY-MM-d").format(dateBirthDC.getDate()):"null";
                            //new Student data is valid
                             return new Teacher(cin, firstName, lastName, email, address, phoneNum, gender,birthDate,true);
    }
    private void removeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseClicked
        // TODO add your handling code here:
          //creating new thread
        int selectedRow = resultTable.getSelectedRow();
        if(selectedRow == -1)
            new Message_Dialog("Select a teacher to remove");
        else
        {
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {
                           
                            
                            //new Student data is valid
                             Teacher newTeacher = getData();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+remove_teacher");//undecating to server that it's a show students request
                            out.writeObject(newTeacher);//sending the student to server
                            out.writeObject(user);     //providing the student to the server
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                 new Message_Dialog("Teacher with the chosen infromations has been removed successfully .");
                                 refreshBtnMouseClicked(null);
                                 cancelBtnMouseClicked(null);
                            }else if(response.equals("no_teacher_removed-"))
                            {
                                    new Message_Dialog("no teacher found with the provided infromations");
                            
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An error has occuried during the removing process , please check the servers log files");
                            }
                                else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                              new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }


                    }
                }).start();
        }
    }//GEN-LAST:event_removeButtonMouseClicked

private boolean setValues() throws ParseException
{
  int selectedIndex = resultTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)resultTable.getModel();


        
        String cin= model.getValueAt(selectedIndex,0).toString();
        oldCin = cin;
        String firstName= model.getValueAt(selectedIndex,1).toString();
        String lastName= model.getValueAt(selectedIndex,2).toString();
      
        String phoneNum= model.getValueAt(selectedIndex,3).toString();
        String address= model.getValueAt(selectedIndex,4).toString();
      
           String email= model.getValueAt(selectedIndex,5).toString();
         int gender = (model.getValueAt(selectedIndex,6).toString().equals("Male"))?1:2;

         String birthDate = (String)model.getValueAt(selectedIndex,7);
         boolean hasPic = (model.getValueAt(selectedIndex,8).toString().equals("Yes"))?true:false;
         
        
         cinTF.setText(cin);
         firstNameTF.setText(firstName);
        lastNameTF.setText(lastName);
        phoneNumTF.setText(phoneNum);
        addrTA.setText(address);
       
           
          hostNameTF.setText(email.substring(0,email.indexOf("@")));
          domainNameTF.setText(email.substring(email.indexOf("@")+1));
          genderCB.setSelectedIndex(gender);
       
         dateBirthDC.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(birthDate));
         if(hasPic==false)
             genderCBFocusLost(null);
         return hasPic;
} 
    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        // TODO add your handling code here:
        cancelBtnMouseClicked(evt);
        resultTable.setRowSelectionAllowed(true);
          setSelectedBtnVisibility(true);
        setUnselectedBtnVisibility(false);
        try
        {
         boolean hasPic=setValues();
        String cin =oldCin;
        
                    if(hasPic)
                    {
                          ObjectOutputStream out = null;
                            ObjectInputStream in = null;
                    try {
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            
                            out = new ObjectOutputStream(socket.getOutputStream());
                             in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+get_teacher_pic");//undecating to server that it's a adding studnet request
                            out.writeObject(cin);
            
                            //receving the response
                            String response = (String)in.readObject();
                         
                            if(response.equals("ok-"))
                            {
                                  
                               ImageIcon pic = (ImageIcon)in.readObject();
                                picLabel.setIcon(new ImageIcon(pic.getImage().getScaledInstance(picLabel.getWidth(), picLabel.getHeight(), Image.SCALE_SMOOTH)));
                              
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An unknown error has occuried when loading the selected teacher's picture , please check the servers log files");
                            }
                              else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                          
                        }catch(IOException ex)
                        {
                               new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }finally
                    {
                        try
                        {
                          if(in!=null)
                                in.close();
                            if(out!=null)
                                 out.close();
                        }catch(IOException ex)
                        {
                            
                        }
                    }
                    }
        }catch(ParseException ex)
        {
            new Message_Dialog("not able to get Date from selected user.");
        }
        
        
        
    }//GEN-LAST:event_resultTableMouseClicked

    private void editBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBtnMouseClicked
        // TODO add your handling code here:
            //creating new thread
        int selectedRow = resultTable.getSelectedRow();
        if(selectedRow == -1)
            new Message_Dialog("Select a teacher to edit");
        else
        {
           // refreshBtnMouseClicked(null);
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {
                           
                            //new Student data is valid
                             Teacher newTeacher = validateData();
                             
                             if(!oldCin.equals(newTeacher.getCin()))
                                 if(result.contains(newTeacher))
                                     throw new DuplicatedTeacherException();
                             
                             String fileName = newTeacher.getFileName();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+edit_teacher");//undecating to server that it's a show students request
                            out.writeObject(newTeacher);//sending the student to server
                            out.writeObject(user);     //providing the student to the server
                            out.writeObject(oldCin);
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                 new Message_Dialog("Teacher with the chosen infromations has been edited successfully .");
                                    if(newTeacher.isHasPic())
                                {
                                       ImageIcon img = new ImageIcon(fileName);
                                       out.writeObject(img);
                                       String extension = fileName.substring(fileName.lastIndexOf("."));
                                       out.writeObject(extension);
                                        response = (String) in.readObject();
                                        
                                        if(response.equals("pic_recieved-"))
                                        {
                                            
                                        }else if(response.equals("err-"))
                                        {
                                            new Message_Dialog("something went wrong when sending the image .");
                                        }
                                          
                                        else
                                        {
                                            new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                                        }
                                            }       
                                 refreshBtnMouseClicked(null);
                                 cancelBtnMouseClicked(null);
                            }else if(response.equals("no_teacher_edited-"))
                            {
                                    new Message_Dialog("no teacher found with the provided infromations");
                            
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An error has occuried during the showing process , please check the servers log files");
                            }
                              else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                              new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }
                        catch(InvalidCinException ex)
                        {
                            cinWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidNomException ex )
                        {
                            firstNameWarningLabel.setVisible(true) ;
                        }catch(InvalidPrenomException ex )
                        {
                            lastNameWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidEmailException ex )
                        {
                            emailWarningLabel.setVisible(true);
                        }catch(InvalidPhoneNumException ex)
                        {
                            phoneNumWarningLabel.setVisible(true);
                        }catch(InvalidGenderException ex)
                        {
                            genderWarningLabel.setVisible(true);
                        } catch (InvalidDateException ex) {
                           birthDateWarningLabel.setVisible(true);
                        }catch (DuplicatedTeacherException ex) {
                             new Message_Dialog("Unable to edit the teacher : CIN must be unique .");
                        }

                    }
                }).start();
             
        }
    }//GEN-LAST:event_editBtnMouseClicked

    private void addButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseEntered
        // TODO add your handling code here:
      
    }//GEN-LAST:event_addButtonMouseEntered

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
       resultTable.setRowSelectionAllowed(false);
         setSelectedBtnVisibility(false);
        setUnselectedBtnVisibility(true);
    }//GEN-LAST:event_formMouseClicked

    private void tableScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableScrollPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableScrollPaneMouseClicked

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        // TODO add your handling code here:
        setInvisibilty();
        initValues();
    }//GEN-LAST:event_cancelBtnMouseClicked

    private void export_iconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_export_iconMouseClicked
        // TODO add your handling code here:
   
                  exportTableToExcel();
        
    }//GEN-LAST:event_export_iconMouseClicked

    private void dateBirthDCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateBirthDCFocusGained
        // TODO add your handling code here:
        birthDateLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_dateBirthDCFocusGained

    private void dateBirthDCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateBirthDCFocusLost
        // TODO add your handling code here:
         birthDateLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_dateBirthDCFocusLost

    private void dateBirthDCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateBirthDCMouseClicked
        // TODO add your handling code here:
        birthDateWarningLabel.setVisible(false);
         birthDateLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_dateBirthDCMouseClicked

    private void importPicIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importPicIconMouseClicked
        // TODO add your handling code here:
        importPic();
    }//GEN-LAST:event_importPicIconMouseClicked

    private void resultTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_resultTableMouseEntered

    private void genderCBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genderCBMouseClicked
        // TODO add your handling code here:
         
    }//GEN-LAST:event_genderCBMouseClicked

    private void showSubjectBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showSubjectBtnMouseClicked
        // TODO add your handling code here:
        int selectedRow = resultTable.getSelectedRow();
        if(selectedRow!=-1)
        {
            int level;
            try {
              String cin = verifCinPhone(cinTF.getText().trim(), 0);
              if(teacherSubjectFrame != null)
                  teacherSubjectFrame.dispose();
                teacherSubjectFrame =  new TeacherSubjectFrame(server_ip, PORT, user, cin);
            } catch (InvalidCinException | InvalidPhoneNumException ex) {
                new Message_Dialog("Somthing went wrong , please reselect the student .");
            }

        }
        else
        {
            new Message_Dialog("Select a teacher to view its subjects.");
        }
    }//GEN-LAST:event_showSubjectBtnMouseClicked

    private void helpIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpIconMouseClicked
        // TODO add your handling code here:
        if(teacherHelpFrame != null)
            teacherHelpFrame.dispose();
       teacherHelpFrame = new TeacherHelpFrame();
    }//GEN-LAST:event_helpIconMouseClicked
// verification Functions
    
    private void importPic()
    {
           //Set default location to C:\Users\Authentic\Desktop or your preferred location
            JFileChooser imageFileChoser = new JFileChooser("C:\\Users\\Authentic\\Desktop");
            //Dialog box title
            imageFileChoser.setDialogTitle("Import image ..");
            //Filter only xls, xlsx, xlsm files
            FileNameExtensionFilter fnef = new FileNameExtensionFilter("Image files", "jpg", "png");
            //Setting extension for selected file names
            imageFileChoser.setFileFilter(fnef);
            int chooser = imageFileChoser.showSaveDialog(null);
            
             if (chooser == JFileChooser.APPROVE_OPTION) 
             {
                 File img = imageFileChoser.getSelectedFile();
                 String path = img.getPath();
                 String extension = path.substring(path.lastIndexOf("."));
                 if(img.length()>4194304)
                     new Message_Dialog("Image is too large ,limit = 4Megabytes");
                 else if(!extension.equals(".jpg") && !extension.equals(".png"))
                 {
                     new Message_Dialog("Please select an image , (.jpg,.png)");
                 }
                 else{
                     
                 fileName = img.getAbsolutePath();
                 ImageIcon image = new ImageIcon(new ImageIcon(fileName).getImage().getScaledInstance(picLabel.getWidth(), picLabel.getHeight(),Image.SCALE_SMOOTH));

                 picLabel.setIcon(image);
                 picUploaded=true;
                 }
             }
    }
    
    private void exportTableToExcel() 
    {
     
        try{
              //Set default location to C:\Users\Authentic\Desktop or your preferred location
            JFileChooser excelFileChooser = new JFileChooser("C:\\Users\\Authentic\\Desktop");
            //Dialog box title
            excelFileChooser.setDialogTitle("Save As ..");
            //Filter only xls, xlsx, xlsm files
            FileNameExtensionFilter fnef = new FileNameExtensionFilter("Excel files", "xls", "xlsx", "xlsm");
            //Setting extension for selected file names
            excelFileChooser.setFileFilter(fnef);
            int chooser = excelFileChooser.showSaveDialog(null);
            //Check if save button has been clicked
            if (chooser == JFileChooser.APPROVE_OPTION) {
        TableModel model = resultTable.getModel();
        FileWriter excel = new FileWriter(excelFileChooser.getSelectedFile()+".xlsx");
        //creating excel header
        for(int i = 0; i < model.getColumnCount(); i++){
            excel.write(model.getColumnName(i) + "\t");
        }

        excel.write("\n");

        for(int i=0; i< model.getRowCount(); i++) {
            for(int j=0; j < model.getColumnCount(); j++) {
                excel.write(model.getValueAt(i,j).toString()+"\t");
            }
            excel.write("\n");
        }

        excel.close();
        new Message_Dialog("Data exported successfully");
            }

    }catch(IOException ex){ new Message_Dialog(ex.getMessage()); }
         
  
    }
    
 
    
  
    
    private int isGenderSelected() throws InvalidGenderException
    {
        int selectedIndex = genderCB.getSelectedIndex();
        if(selectedIndex == 0)
            throw new InvalidGenderException();
        return selectedIndex-1;
    }
    
    
   
    
    private String verifCinPhone(String number ,int mode) throws InvalidCinException  , InvalidPhoneNumException
    {  
        
       if (number.isEmpty() || number.length()!= 8) 
       { if(mode == 0)
            throw new InvalidCinException() ;  
            else
               throw new InvalidPhoneNumException();
       }
       
       for (int i = 0 ; i < number.length() ; i++) 
      {
       if (!Character.isDigit(number.charAt(i)))
       {
            if(mode == 0)
            throw new InvalidCinException() ;  
            else
               throw new InvalidPhoneNumException();
       }
      }
    return number ; 
        
    }
    private String verifnom(String nom ) throws InvalidNomException 
    { 
       
        if (nom.isEmpty() ) throw new InvalidNomException() ; 
        for (int i = 0 ; i< nom.length() ; i ++ )
        {
          if (!Character.isLetter(nom.charAt(i))) throw new InvalidNomException() ; 
              
        }
    return nom ; 
    }
    private String verifprenom(String prenom) throws InvalidPrenomException 
    {
        if(prenom.isEmpty()) throw new InvalidPrenomException() ; 
        for (int i = 0 ; i< prenom.length() ; i ++ )
        {
          if (!Character.isLetter(prenom.charAt(i))) throw new InvalidPrenomException() ; 
              
        }
    return prenom  ;   
    }
   
    
    private String verifemail(String hostName ,String domainName ) throws InvalidEmailException 
    {
       
   
        if(hostName.isEmpty() || domainName.isEmpty())
            throw new InvalidEmailException();
        
        int dotCount=0;
        int dashCount=0;
        int unnderScoreCount=0;
        
        for(int i=0;i<hostName.length();i++)
        {
            char currentChar=hostName.charAt(i);
            if(currentChar=='.')
            {
                dotCount++;
                if(dotCount==2)
                    throw new InvalidEmailException();  
            }else if(currentChar=='-')
            {
                 dashCount++;
                if(dashCount==2)
                    throw new InvalidEmailException();  
            }else if(currentChar=='_')
            {
                 unnderScoreCount++;
                if(unnderScoreCount==2)
                    throw new InvalidEmailException();  
            }
            else if(!Character.isLetterOrDigit(currentChar))
                    throw new InvalidEmailException();
            
        }
        
        
               
        // valid hostName
        
        dashCount=0;
        dotCount=0;
        unnderScoreCount=0;
        
        if(!domainName.contains("."))
            throw new InvalidEmailException();
        
        for(int i=0;i<domainName.length();i++)
        {
            char currentChar=domainName.charAt(i);
           if(currentChar=='.')
            {
                dotCount++;
                if(dotCount==3)
                    throw new InvalidEmailException();  
            }else if(currentChar=='-')
            {
                 dashCount++;
                if(dashCount==2)
                    throw new InvalidEmailException();  
            }else if(currentChar=='_')
            {
                 unnderScoreCount++;
                if(unnderScoreCount==2)
                    throw new InvalidEmailException();  
            }
                else if(!Character.isLetterOrDigit(currentChar))
                    throw new InvalidEmailException();
            }
       
        //valid domain name
        
        return hostName+"@"+domainName;
    }
    
    public void disposeFrames()
    {
        if(teacherHelpFrame != null)
            teacherHelpFrame.dispose();
        
        if(teacherSubjectFrame != null)
            teacherSubjectFrame.dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel addrLabel;
    private javax.swing.JTextArea addrTA;
    private javax.swing.JScrollPane addressScrollPane;
    private javax.swing.JLabel atSignLabel;
    private javax.swing.JLabel birthDateLabel;
    private javax.swing.JLabel birthDateWarningLabel;
    private javax.swing.JPanel btnPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel cinLabel;
    private javax.swing.JTextField cinTF;
    private javax.swing.JLabel cinWarningLabel;
    private com.toedter.calendar.JDateChooser dateBirthDC;
    private javax.swing.JTextField domainNameTF;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emailWarningLabel;
    private javax.swing.JLabel exportLabel;
    private javax.swing.JLabel export_icon;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTF;
    private javax.swing.JLabel firstNameWarningLabel;
    private javax.swing.JComboBox genderCB;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JLabel genderWarningLabel;
    private javax.swing.JLabel helpIcon;
    private javax.swing.JTextField hostNameTF;
    private javax.swing.JLabel importPicIcon;
    private javax.swing.JLabel importPicLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTF;
    private javax.swing.JLabel lastNameWarningLabel;
    private javax.swing.JLabel phoneNumLabel;
    private javax.swing.JTextField phoneNumTF;
    private javax.swing.JLabel phoneNumWarningLabel;
    private javax.swing.JLabel picLabel;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton removeButton;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton showButton;
    private javax.swing.JButton showSubjectBtn;
    private javax.swing.JLabel studentAreaLabel;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
   
    private boolean isAdding = false;
    private static User user;
    private static int PORT;
    private static String server_ip;
    private static String oldCin="";
    private static String fileName;
    private static boolean picUploaded=false;
    private static TeacherHelpFrame teacherHelpFrame=null;
    private static TeacherSubjectFrame teacherSubjectFrame =null;
    private static Collection<Teacher> result =null;
}
