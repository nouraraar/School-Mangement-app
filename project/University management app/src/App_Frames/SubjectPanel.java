/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package App_Frames;

import App_Exceptions.*;
import Dialogs.Message_Dialog;
import Models.*;
import java.awt.FlowLayout;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/**
 *
 * @author amir,chedi,nour
 */
public class SubjectPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentPanel
     */
    public SubjectPanel(String server_ip,int PORT,User user) {
        this.user = user;
        this.server_ip = server_ip;
        this.PORT = PORT;
        
        initComponents();
        refreshBtnMouseClicked(null);
        setInvisibilty() ;  
        initValues();
    }
    
    
    private void initValues()
    {

        resultTable.setRowSelectionAllowed(false);
        cinTF.setText("");
        descriptionTA.setText("");
        buttonGroup1.clearSelection();
       
        volumeTF.setText("");
        firstYearFieldCB.setSelectedIndex(0);
        secondYearFieldCB.setSelectedIndex(0);
       
    }
    
        private void setSelectedBtnVisibility(boolean isVisible)
{
     editBtn.setVisible(isVisible);
         removeButton.setVisible(isVisible);
        

}

private void setUnselectedBtnVisibility(boolean isVisible)

{
    addButton.setVisible(isVisible);
}
    
     private void setInvisibilty()
     {
         setUnselectedBtnVisibility(true);
         setSelectedBtnVisibility(false);
         descriptionWarningLabel.setVisible(false);
        
       lvlWarningLabel.setVisible(false);
       cinWarningLabel.setVisible(false); 
       volumeWarningLabel.setVisible(false); 
       fieldLabel.setVisible(false);
        firstYearFieldCB.setVisible(false);
        secondYearFieldCB.setVisible(false);
        
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        tableScrollPane = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        studentAreaLabel = new javax.swing.JLabel();
        cinTF = new javax.swing.JTextField();
        addressScrollPane = new javax.swing.JScrollPane();
        descriptionTA = new javax.swing.JTextArea();
        secondYearFieldCB = new javax.swing.JComboBox();
        lvl1RB = new javax.swing.JRadioButton();
        lvl2RB = new javax.swing.JRadioButton();
        lvl3RB = new javax.swing.JRadioButton();
        lvl5RB = new javax.swing.JRadioButton();
        cinLabel = new javax.swing.JLabel();
        volumeLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        lvlLabel = new javax.swing.JLabel();
        cinWarningLabel = new javax.swing.JLabel();
        volumeWarningLabel = new javax.swing.JLabel();
        lvlWarningLabel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        lvl4RB = new javax.swing.JRadioButton();
        firstYearFieldCB = new javax.swing.JComboBox();
        volumeTF = new javax.swing.JTextField();
        fieldLabel = new javax.swing.JLabel();
        export_icon = new javax.swing.JLabel();
        exportLabel = new javax.swing.JLabel();
        descriptionWarningLabel = new javax.swing.JLabel();
        helpIcon = new javax.swing.JLabel();
        btnPanel = new javax.swing.JPanel();
        refreshBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        showButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(34, 40, 44));
        setMaximumSize(new java.awt.Dimension(884, 626));
        setPreferredSize(new java.awt.Dimension(884, 626));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(null);

        tableScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tableScrollPane.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableScrollPaneMouseClicked(evt);
            }
        });

        resultTable.setBackground(new java.awt.Color(64, 70, 74));
        resultTable.setForeground(new java.awt.Color(255, 255, 255));
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Teacher CIN", "Description", "volume", "Level", "Field"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.setFocusable(false);
        resultTable.setGridColor(new java.awt.Color(0, 0, 0));
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                resultTableMouseEntered(evt);
            }
        });
        tableScrollPane.setViewportView(resultTable);

        add(tableScrollPane);
        tableScrollPane.setBounds(0, 470, 900, 180);

        studentAreaLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        studentAreaLabel.setForeground(new java.awt.Color(144, 153, 164));
        studentAreaLabel.setText("Subject Area");
        add(studentAreaLabel);
        studentAreaLabel.setBounds(20, 0, 160, 31);

        cinTF.setBackground(new java.awt.Color(34, 40, 44));
        cinTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cinTF.setForeground(new java.awt.Color(255, 255, 255));
        cinTF.setBorder(null);
        cinTF.setNextFocusableComponent(descriptionTA);
        cinTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cinTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cinTFFocusLost(evt);
            }
        });
        add(cinTF);
        cinTF.setBounds(200, 110, 180, 20);

        addressScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        descriptionTA.setBackground(new java.awt.Color(34, 40, 44));
        descriptionTA.setColumns(20);
        descriptionTA.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        descriptionTA.setForeground(new java.awt.Color(255, 255, 255));
        descriptionTA.setLineWrap(true);
        descriptionTA.setRows(4);
        descriptionTA.setNextFocusableComponent(volumeTF);
        descriptionTA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                descriptionTAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                descriptionTAFocusLost(evt);
            }
        });
        addressScrollPane.setViewportView(descriptionTA);

        add(addressScrollPane);
        addressScrollPane.setBounds(200, 230, 190, 60);

        secondYearFieldCB.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        secondYearFieldCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RT", "GL", "IIA", "IMI", "CH", "BIO" }));
        secondYearFieldCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                secondYearFieldCBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                secondYearFieldCBFocusLost(evt);
            }
        });
        add(secondYearFieldCB);
        secondYearFieldCB.setBounds(600, 240, 190, 21);
        secondYearFieldCB.setVisible(false);

        lvl1RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl1RB);
        lvl1RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl1RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl1RB.setSelected(false);
        lvl1RB.setText("1");
        lvl1RB.setNextFocusableComponent(volumeTF);
        lvl1RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl1RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl1RBFocusLost(evt);
            }
        });
        add(lvl1RB);
        lvl1RB.setBounds(590, 110, 40, 25);

        lvl2RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl2RB);
        lvl2RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl2RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl2RB.setText("2");
        lvl2RB.setNextFocusableComponent(volumeTF);
        lvl2RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl2RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl2RBFocusLost(evt);
            }
        });
        add(lvl2RB);
        lvl2RB.setBounds(630, 110, 37, 25);

        lvl3RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl3RB);
        lvl3RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl3RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl3RB.setText("3");
        lvl3RB.setNextFocusableComponent(volumeTF);
        lvl3RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl3RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl3RBFocusLost(evt);
            }
        });
        add(lvl3RB);
        lvl3RB.setBounds(670, 110, 37, 25);

        lvl5RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl5RB);
        lvl5RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl5RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl5RB.setText("5");
        lvl5RB.setNextFocusableComponent(volumeTF);
        lvl5RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl5RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl5RBFocusLost(evt);
            }
        });
        add(lvl5RB);
        lvl5RB.setBounds(750, 110, 40, 25);

        cinLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cinLabel.setForeground(new java.awt.Color(135, 137, 139));
        cinLabel.setText("Teacher CIN :");
        add(cinLabel);
        cinLabel.setBounds(20, 110, 100, 31);

        volumeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        volumeLabel.setForeground(new java.awt.Color(135, 137, 139));
        volumeLabel.setText("Subject volume (hours) :");
        add(volumeLabel);
        volumeLabel.setBounds(20, 340, 160, 31);

        descriptionLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descriptionLabel.setForeground(new java.awt.Color(135, 137, 139));
        descriptionLabel.setText("Subject description: ");
        add(descriptionLabel);
        descriptionLabel.setBounds(20, 230, 140, 31);

        lvlLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lvlLabel.setForeground(new java.awt.Color(135, 137, 139));
        lvlLabel.setText("Level :");
        add(lvlLabel);
        lvlLabel.setBounds(520, 110, 60, 25);

        cinWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        cinWarningLabel.setText("* CIN must have 8 digits");
        add(cinWarningLabel);
        cinWarningLabel.setBounds(200, 140, 150, 16);
        cinWarningLabel.setVisible(false);

        volumeWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        volumeWarningLabel.setText("* Subject volume must have an unsigned integer value");
        add(volumeWarningLabel);
        volumeWarningLabel.setBounds(210, 380, 360, 20);

        lvlWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        lvlWarningLabel.setText("* Level must be Selected");
        add(lvlWarningLabel);
        lvlWarningLabel.setBounds(600, 140, 150, 16);
        add(jSeparator3);
        jSeparator3.setBounds(200, 130, 180, 10);
        add(jSeparator4);
        jSeparator4.setBounds(210, 370, 180, 10);

        lvl4RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl4RB);
        lvl4RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl4RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl4RB.setText("4");
        lvl4RB.setNextFocusableComponent(volumeTF);
        lvl4RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl4RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl4RBFocusLost(evt);
            }
        });
        add(lvl4RB);
        lvl4RB.setBounds(710, 110, 37, 25);

        firstYearFieldCB.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        firstYearFieldCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MPI", "CBA" }));
        firstYearFieldCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firstYearFieldCBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstYearFieldCBFocusLost(evt);
            }
        });
        add(firstYearFieldCB);
        firstYearFieldCB.setBounds(600, 240, 190, 21);
        firstYearFieldCB.setVisible(false);

        volumeTF.setBackground(new java.awt.Color(34, 40, 44));
        volumeTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        volumeTF.setForeground(new java.awt.Color(255, 255, 255));
        volumeTF.setBorder(null);
        volumeTF.setNextFocusableComponent(lvl1RB);
        volumeTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                volumeTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                volumeTFFocusLost(evt);
            }
        });
        add(volumeTF);
        volumeTF.setBounds(210, 350, 180, 20);

        fieldLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fieldLabel.setForeground(new java.awt.Color(135, 137, 139));
        fieldLabel.setText("Field :");
        add(fieldLabel);
        fieldLabel.setBounds(520, 240, 50, 26);
        fieldLabel.setVisible(false);

        export_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-microsoft-excel-40.png"))); // NOI18N
        export_icon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        export_icon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                export_iconMouseClicked(evt);
            }
        });
        add(export_icon);
        export_icon.setBounds(10, 420, 40, 50);

        exportLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        exportLabel.setForeground(new java.awt.Color(144, 153, 164));
        exportLabel.setText("export to Google sheet");
        add(exportLabel);
        exportLabel.setBounds(50, 440, 170, 16);

        descriptionWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        descriptionWarningLabel.setText("* Description must be filled");
        add(descriptionWarningLabel);
        descriptionWarningLabel.setBounds(200, 300, 170, 16);

        helpIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-help-20.png"))); // NOI18N
        helpIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        helpIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpIconMouseClicked(evt);
            }
        });
        add(helpIcon);
        helpIcon.setBounds(180, 0, 20, 30);

        btnPanel.setBackground(new java.awt.Color(34, 40, 44));
        btnPanel.setForeground(new java.awt.Color(34, 40, 44));

        refreshBtn.setBackground(new java.awt.Color(33, 35, 35));
        refreshBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        refreshBtn.setForeground(new java.awt.Color(255, 255, 255));
        refreshBtn.setText("Refresh");
        refreshBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        refreshBtn.setBorderPainted(false);
        refreshBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        refreshBtn.setIconTextGap(0);
        refreshBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshBtnMouseClicked(evt);
            }
        });
        btnPanel.add(refreshBtn);

        editBtn.setBackground(new java.awt.Color(33, 35, 35));
        editBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        editBtn.setForeground(new java.awt.Color(255, 255, 255));
        editBtn.setText("Edit");
        editBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        editBtn.setBorderPainted(false);
        editBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editBtnMouseClicked(evt);
            }
        });
        btnPanel.add(editBtn);

        showButton.setBackground(new java.awt.Color(33, 35, 35));
        showButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        showButton.setForeground(new java.awt.Color(255, 255, 255));
        showButton.setText("Search");
        showButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        showButton.setBorderPainted(false);
        showButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        showButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showButtonMouseClicked(evt);
            }
        });
        btnPanel.add(showButton);

        addButton.setBackground(new java.awt.Color(33, 35, 35));
        addButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add");
        addButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addButton.setBorderPainted(false);
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addButtonMouseEntered(evt);
            }
        });
        btnPanel.add(addButton);

        removeButton.setBackground(new java.awt.Color(33, 35, 35));
        removeButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("Remove");
        removeButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        removeButton.setBorderPainted(false);
        removeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeButtonMouseClicked(evt);
            }
        });
        btnPanel.add(removeButton);

        cancelBtn.setBackground(new java.awt.Color(33, 35, 35));
        cancelBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cancelBtn.setForeground(new java.awt.Color(255, 255, 255));
        cancelBtn.setText("Reset");
        cancelBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cancelBtn.setBorderPainted(false);
        cancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });
        btnPanel.add(cancelBtn);

        btnPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));

        add(btnPanel);
        btnPanel.setBounds(570, 430, 330, 30);
    }// </editor-fold>//GEN-END:initComponents
     
    private void cinTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cinTFFocusGained
        // TODO add your handling code here:
          cinWarningLabel.setVisible(false);
        cinLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_cinTFFocusGained

    private void cinTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cinTFFocusLost
        // TODO add your handling code here:
          cinLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_cinTFFocusLost

    private void descriptionTAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descriptionTAFocusGained
        // TODO add your handling code here:
        descriptionWarningLabel.setVisible(false);
        descriptionLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_descriptionTAFocusGained

    private void descriptionTAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descriptionTAFocusLost
        // TODO add your handling code here:
        
         descriptionLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_descriptionTAFocusLost

    private void secondYearFieldCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_secondYearFieldCBFocusGained
        // TODO add your handling code here:
         fieldLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_secondYearFieldCBFocusGained

    private void secondYearFieldCBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_secondYearFieldCBFocusLost
        // TODO add your handling code here:
         fieldLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_secondYearFieldCBFocusLost

    private void lvl1RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl1RBFocusGained
        // TODO add your handling code here:
      lvlWarningLabel.setVisible(false);
      secondYearFieldCB.setVisible(false);
      fieldLabel.setVisible(true);
      firstYearFieldCB.setVisible(true);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl1RBFocusGained

    private void lvl1RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl1RBFocusLost
        // TODO add your handling code here:
        lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl1RBFocusLost

    private void lvl2RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl2RBFocusGained
        // TODO add your handling code here:
        lvlWarningLabel.setVisible(false);
        firstYearFieldCB.setVisible(false);
        fieldLabel.setVisible(true);
        secondYearFieldCB.setVisible(true);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl2RBFocusGained

    private void lvl2RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl2RBFocusLost
        // TODO add your handling code here:
        lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl2RBFocusLost

    private void lvl3RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl3RBFocusGained
        // TODO add your handling code here:
          fieldLabel.setVisible(true);
          firstYearFieldCB.setVisible(false);
        secondYearFieldCB.setVisible(true);
        lvlWarningLabel.setVisible(false);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl3RBFocusGained

    private void lvl3RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl3RBFocusLost
        // TODO add your handling code here:
        lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl3RBFocusLost

    private void lvl5RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl5RBFocusGained
        // TODO add your handling code here:
         fieldLabel.setVisible(true);
         firstYearFieldCB.setVisible(false);
        secondYearFieldCB.setVisible(true);
        lvlWarningLabel.setVisible(false);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl5RBFocusGained

    private void lvl5RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl5RBFocusLost
        // TODO add your handling code here:
        lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl5RBFocusLost

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        // TODO add your handling code here:
       
           
             
             //creating new thread
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {
                          
                            //new Student data is valid
                             Subject newSubject = validateData();
                        
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+add_subject");//undecating to server that it's a adding studnet request
                            out.writeObject(newSubject);
                            out.writeObject(user);     //providing the student to the server
                           
                                
                              
                           
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                  
                                new Message_Dialog("Subject  added to database successfully .");
                                refreshBtnMouseClicked(null);
                                cancelBtnMouseClicked(null);
    
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An error has occuried during the adding process , please check the servers log files");
                            }
                             else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                               new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }
                        catch(InvalidCinException ex)
                        {
                            cinWarningLabel.setVisible(true) ;
                        }
                       
                       catch(InvalidLevelException ex)
                        {
                            lvlWarningLabel.setVisible(true);
                        } catch (InvalidDescriptionException ex) {
                            descriptionWarningLabel.setVisible(true);
                        } catch (InvalidVolumeException ex) {
                           volumeWarningLabel.setVisible(true);
                        }


                    }
                }).start();
             
            
        
    }//GEN-LAST:event_addButtonMouseClicked

    private Subject validateData() throws  InvalidCinException, InvalidLevelException , InvalidDescriptionException , InvalidVolumeException 
    {
                            String cin = verifCin(cinTF.getText().trim());
                             String description = isValidDescription(descriptionTA.getText().trim());
                            int volume = isValidVolume(volumeTF.getText().trim());
                            int level = isLvlSelected();
                            int fieldId = fieldSelectedIndex(level);

                            
                            //new Subject data is valid
                            Subject newSubject= new Subject(cin, description, volume, level, fieldId);
                        
                            return newSubject;
    }
    
 private int isValidVolume(String volume) throws InvalidVolumeException
 {
     try
     {
     int result = Integer.parseInt(volume);
      if(result <=0)
         throw new InvalidVolumeException();
     return result;
     }catch(Exception ex)
     {
         throw new InvalidVolumeException();
     }
    
 }
    
 private String isValidDescription(String description) throws InvalidDescriptionException
 {
     if(description.isEmpty())
         throw new InvalidDescriptionException();
     
     return description;
 }
    
    private void lvl4RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl4RBFocusGained
        // TODO add your handling code here:
          fieldLabel.setVisible(true);
          firstYearFieldCB.setVisible(false);
        secondYearFieldCB.setVisible(true);
         lvlWarningLabel.setVisible(false);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl4RBFocusGained

    private void lvl4RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl4RBFocusLost
        // TODO add your handling code here:
           lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl4RBFocusLost

    private void firstYearFieldCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstYearFieldCBFocusGained
        // TODO add your handling code here:
         fieldLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_firstYearFieldCBFocusGained

    private void firstYearFieldCBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstYearFieldCBFocusLost
        // TODO add your handling code here:
         fieldLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_firstYearFieldCBFocusLost

    private void refreshBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshBtnMouseClicked
        // TODO add your handling code here:
        
        new Thread(new Runnable() {

            @Override
            public void run() {
                
                 try {

                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+show_all_subjects");//undecating to server that it's a show all studnets request
                            out.writeObject(user);     //providing the student to the server
                           //recieve the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                 //receving the response
                                  Collection<Subject> result = (ArrayList<Subject>)in.readObject();
                                  addSubjectsResultTable(result);
                                  cancelBtnMouseClicked(null);
 
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An unknown error has occuried during the showing process , please check the servers log files");
                            }
                            else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                               new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        


                    }
                
            }
        }).start();
        
    }//GEN-LAST:event_refreshBtnMouseClicked

    private void addSubjectsResultTable(Collection<Subject> result)
    {
        resultTable.removeAll();
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        
        while(model.getRowCount()>0)
            model.removeRow(0);
        
                                Object row[] = new Object[5];
                                for(Subject subject : result)
                                {
                                 
                                    row[0] = subject.getTeacherCin();
                                   
                                    row[1] = subject.getDescription();
                                    row[2] = (int)subject.getVolume();
                                    row[3] = (int)subject.getLevel();
                                   
                                    int tmp = subject.getFieldId();
                                    switch(tmp)
                                    {
                                        case 1:row[4]="MPI";break;
                                        case 2:row[4]="CBA";break;
                                        case 3:row[4]="RT";break;
                                        case 4:row[4]="GL";break;
                                        case 5:row[4]="IIA";break;
                                        case 6:row[4]="IMI";break;
                                        case 7:row[4]="CH";break;
                                        default:row[4]="BIO";
                                        
                                    }
                                
                                    model.addRow(row);
                                }
    }
    
    private void showButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showButtonMouseClicked
        // TODO add your handling code here:
        //creating new thread
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {

                            //new Student data is valid
                             Subject newSubject = getData();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+show_subjects");//undecating to server that it's a show students request
                            out.writeObject(newSubject);//sending the student to server
                            out.writeObject(user);     //providing the student to the server
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                //recieving the data
                                Collection<Subject> result =(ArrayList<Subject>)in.readObject();
                                addSubjectsResultTable(result);
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An unknown error has occuried during the showing process , please check the servers log files");
                            }
                             else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                               new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }


                    }
                }).start();
             
        
    }//GEN-LAST:event_showButtonMouseClicked

    private Subject getData()
    {
       
                            String cin = cinTF.getText().trim();
                 
                            
                            int level ;
                            if(lvl1RB.isSelected())
                                level=1;
                            else if(lvl2RB.isSelected())
                                level=2;
                            else if(lvl3RB.isSelected())
                                level=3;
                            else if(lvl4RB.isSelected())
                                level=4;
                            else if(lvl5RB.isSelected())
                                level=5;
                            else
                                level =-1;
                            
                            int fieldId = (level==-1)?-1:fieldSelectedIndex(level);
                            String description = descriptionTA.getText().trim(); 
                            int volume ;
                            try
                            {
                                volume = Integer.parseInt(volumeTF.getText().trim());
                            }catch(Exception ex)
                            {
                                volume = -1;
                            }
                 
                       
                            //new Subject data is valid
                             return new Subject(cin, description, volume, level, fieldId);
    }
    private void removeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseClicked
        // TODO add your handling code here:
          //creating new thread
        int selectedRow = resultTable.getSelectedRow();
        if(selectedRow == -1)
            new Message_Dialog("Select a subject to remove");
        else
        {
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {
                           
                            
                            //new Student data is valid
                             Subject newSubject = validateData();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+remove_subject");//undecating to server that it's a show students request
                            out.writeObject(newSubject);//sending the student to server
                            out.writeObject(user);     //providing the student to the server
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                 new Message_Dialog("Subject with the chosen infromations has been removed successfully .");
                                 refreshBtnMouseClicked(null);
                                 cancelBtnMouseClicked(null);
                            }else if(response.equals("no_subject_removed-"))
                            {
                                    new Message_Dialog("no subject found with the provided infromations");
                            
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An error has occuried during the showing process , please check the servers log files");
                            }
                              else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                               new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }
                           catch(InvalidCinException ex)
                        {
                            cinWarningLabel.setVisible(true) ;
                        }
                       
                       catch(InvalidLevelException ex)
                        {
                            lvlWarningLabel.setVisible(true);
                        } catch (InvalidDescriptionException ex) {
                            descriptionWarningLabel.setVisible(true);
                        } catch (InvalidVolumeException ex) {
                           volumeWarningLabel.setVisible(true);
                        }


                    }
                }).start();
        }
    }//GEN-LAST:event_removeButtonMouseClicked

private void setValues() throws ParseException
{
  int selectedIndex = resultTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)resultTable.getModel();
       
        String cin= model.getValueAt(selectedIndex,0).toString();
        String description= model.getValueAt(selectedIndex,1).toString();
         
        int volume = Integer.parseInt(model.getValueAt(selectedIndex,2).toString());
         int level =Integer.parseInt(model.getValueAt(selectedIndex,3).toString());
          
       
         String fieldWording =  model.getValueAt(selectedIndex,4).toString();
   
       
         int fieldId;
         if(fieldWording.equals("MPI"))
             fieldId=1;
         else if(fieldWording.equals("CBA"))
             fieldId=2;
         else if(fieldWording.equals("RT"))
             fieldId=3;
         else if(fieldWording.equals("GL"))
             fieldId=4;
         else if(fieldWording.equals("IIA"))
             fieldId=5;
         else if(fieldWording.equals("IMI"))
             fieldId=6;
         else if(fieldWording.equals("CH"))
             fieldId=7;
         else
             fieldId=8;
  
         cinTF.setText(cin);

        descriptionTA.setText(description);
        if(level == 1)
            lvl1RB.setSelected(true);
        else if(level == 2)
            lvl2RB.setSelected(true);
        else if(level == 3)
            lvl3RB.setSelected(true);
        else if(level == 4)
            lvl4RB.setSelected(true);
            else
            lvl5RB.setSelected(true);
           
          volumeTF.setText(String.valueOf(volume));
         
          if(level == 1)
          {
              firstYearFieldCB.setSelectedIndex(fieldId-1);
              firstYearFieldCB.setVisible(true);
              fieldLabel.setVisible(true);
          }
              else
          {
              secondYearFieldCB.setSelectedIndex(fieldId-3);
                secondYearFieldCB.setVisible(true);
              fieldLabel.setVisible(true);
          }
        
          oldSubject = new Subject(cin,description,volume,level,fieldId);
    
}

    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        // TODO add your handling code here:
        cancelBtnMouseClicked(evt);
        resultTable.setRowSelectionAllowed(true);
        setSelectedBtnVisibility(true);
        setUnselectedBtnVisibility(false);
        try {
            setValues();
        }catch(ParseException ex)
        {
            new Message_Dialog("something went wrong when loading selected subject data.");
        }
                        
        
        
        
        
    }//GEN-LAST:event_resultTableMouseClicked

    private void editBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBtnMouseClicked
        // TODO add your handling code here:
            //creating new thread
        int selectedRow = resultTable.getSelectedRow();
        if(selectedRow == -1)
            new Message_Dialog("Select a subject to edit");
        else
        {
           
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {
                           
                            //new Student data is valid
                             Subject newSubject = validateData();
            
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+edit_subject");//undecating to server that it's a show students request
                            out.writeObject(newSubject);//sending the student to server
                            out.writeObject(user);     //providing the student to the server
                            out.writeObject(oldSubject);
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                 new Message_Dialog("Subject with the chosen infromations has been edited successfully .");
                                     
                                 refreshBtnMouseClicked(null);
                                 cancelBtnMouseClicked(null);
                            }else if(response.equals("no_subject_edited-"))
                            {
                                    new Message_Dialog("no subject found with the provided infromations");
                            
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An unknown error has occuried during the editing process , please check the servers log files");
                            }
                             else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                               new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }
                        catch(InvalidCinException ex)
                        {
                            cinWarningLabel.setVisible(true) ;
                        }
                       catch(InvalidLevelException ex)
                        {
                            lvlWarningLabel.setVisible(true);
                        } catch (InvalidDescriptionException ex) {
                           descriptionWarningLabel.setVisible(true);
                        } catch (InvalidVolumeException ex) {
                            volumeWarningLabel.setVisible(true);
                        }

                    }
                }).start();
             
        }
    }//GEN-LAST:event_editBtnMouseClicked

    private void addButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseEntered
        // TODO add your handling code here:
      
    }//GEN-LAST:event_addButtonMouseEntered

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
       resultTable.setRowSelectionAllowed(false);
        setSelectedBtnVisibility(false);
        setUnselectedBtnVisibility(true);
    }//GEN-LAST:event_formMouseClicked

    private void tableScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableScrollPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableScrollPaneMouseClicked

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        // TODO add your handling code here:
        setInvisibilty();
        initValues();
    }//GEN-LAST:event_cancelBtnMouseClicked

    private void export_iconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_export_iconMouseClicked
        // TODO add your handling code here:
   
                  exportTableToExcel();
        
    }//GEN-LAST:event_export_iconMouseClicked

    private void resultTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_resultTableMouseEntered

    private void volumeTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_volumeTFFocusLost
        // TODO add your handling code here:
        volumeLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_volumeTFFocusLost

    private void volumeTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_volumeTFFocusGained
        // TODO add your handling code here:
        volumeWarningLabel.setVisible(false);
        volumeLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_volumeTFFocusGained

    private void helpIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpIconMouseClicked
        // TODO add your handling code here:
        if(subjectHelpFrame != null)
            subjectHelpFrame.dispose();
        subjectHelpFrame =  new SubjectHelpFrame();
    }//GEN-LAST:event_helpIconMouseClicked
// verification Functions
    
 
    
    private void exportTableToExcel() 
    {
     
        try{
              //Set default location to C:\Users\Authentic\Desktop or your preferred location
            JFileChooser excelFileChooser = new JFileChooser("C:\\Users\\Authentic\\Desktop");
            //Dialog box title
            excelFileChooser.setDialogTitle("Save As ..");
            //Filter only xls, xlsx, xlsm files
            FileNameExtensionFilter fnef = new FileNameExtensionFilter("Excel files", "xls", "xlsx", "xlsm");
            //Setting extension for selected file names
            excelFileChooser.setFileFilter(fnef);
            int chooser = excelFileChooser.showSaveDialog(null);
            //Check if save button has been clicked
            if (chooser == JFileChooser.APPROVE_OPTION) {
        TableModel model = resultTable.getModel();
        FileWriter excel = new FileWriter(excelFileChooser.getSelectedFile()+".xlsx");
        //creating excel header
        for(int i = 0; i < model.getColumnCount(); i++){
            excel.write(model.getColumnName(i) + "\t");
        }

        excel.write("\n");

        for(int i=0; i< model.getRowCount(); i++) {
            for(int j=0; j < model.getColumnCount(); j++) {
                excel.write(model.getValueAt(i,j).toString()+"\t");
            }
            excel.write("\n");
        }

        excel.close();
        new Message_Dialog("Data exported successfully");
            }

    }catch(IOException ex){ new Message_Dialog(ex.getMessage()); }
         
  
    }
    
   private int fieldSelectedIndex(int lvl)
   {
       return (lvl == 1)?firstYearFieldCB.getSelectedIndex()+1:secondYearFieldCB.getSelectedIndex()+3;
   }
    
    private int isLvlSelected() throws InvalidLevelException
    {
        boolean lvl1Selected = lvl1RB.isSelected(),lvl2Selected = lvl2RB.isSelected(),lvl3Selected = lvl3RB.isSelected(),lvl4Selected = lvl4RB.isSelected(),lvl5Selected = lvl5RB.isSelected();
         if(!lvl1Selected && !lvl2Selected && !lvl3Selected && !lvl4Selected && !lvl5Selected)
             throw new InvalidLevelException();
         
        if(lvl1Selected)
            return 1;
        if(lvl2Selected)
            return 2;
        if(lvl3Selected)
            return 3;
        if(lvl4Selected)
            return 4;

            return 5;
    }
    
   
    
    
   
    
    
    private String verifCin(String number ) throws InvalidCinException 
    {  
        
       if (number.isEmpty() || number.length()!= 8) 
       { 
            throw new InvalidCinException() ;  
           
       }
       
       for (int i = 0 ; i < number.length() ; i++) 
      {
       if (!Character.isDigit(number.charAt(i)))
       {
          
            throw new InvalidCinException() ;  
        
       }
      }
    return number ; 
        
    }
  
   
    public void disposeFrames()
    {
        if(subjectHelpFrame != null)
        subjectHelpFrame.dispose();
    }
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JScrollPane addressScrollPane;
    private javax.swing.JPanel btnPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel cinLabel;
    private javax.swing.JTextField cinTF;
    private javax.swing.JLabel cinWarningLabel;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionTA;
    private javax.swing.JLabel descriptionWarningLabel;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel exportLabel;
    private javax.swing.JLabel export_icon;
    private javax.swing.JLabel fieldLabel;
    private javax.swing.JComboBox firstYearFieldCB;
    private javax.swing.JLabel helpIcon;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JRadioButton lvl1RB;
    private javax.swing.JRadioButton lvl2RB;
    private javax.swing.JRadioButton lvl3RB;
    private javax.swing.JRadioButton lvl4RB;
    private javax.swing.JRadioButton lvl5RB;
    private javax.swing.JLabel lvlLabel;
    private javax.swing.JLabel lvlWarningLabel;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton removeButton;
    private javax.swing.JTable resultTable;
    private javax.swing.JComboBox secondYearFieldCB;
    private javax.swing.JButton showButton;
    private javax.swing.JLabel studentAreaLabel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JTextField volumeTF;
    private javax.swing.JLabel volumeWarningLabel;
    // End of variables declaration//GEN-END:variables
   

    private static User user;
    private static int PORT;
    private static String server_ip;
    private static Subject oldSubject=null;
    private static SubjectHelpFrame subjectHelpFrame = null;
}
