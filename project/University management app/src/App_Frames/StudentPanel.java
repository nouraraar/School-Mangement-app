/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package App_Frames;

import App_Exceptions.*;
import Dialogs.Message_Dialog;
import Models.*;
import java.awt.FlowLayout;
import java.awt.Image;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/**
 *
 * @author amir,chedi,nour
 */
public class StudentPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentPanel
     */
    public StudentPanel(String server_ip,int PORT,User user) {
        this.user = user;
        this.server_ip = server_ip;
        this.PORT = PORT;
        
        initComponents();
        refreshBtnMouseClicked(null);
        setInvisibilty() ;  
        initValues();
    }
    
    
    private void initValues()
    {
        picUploaded=false;
        picLabel.setIcon(null);
        dateBirthDC.setDate(null);
        resultTable.setRowSelectionAllowed(false);
        numInscTF.setText("");
        cinTF.setText("");
        firstNameTF.setText("");
        lastNameTF.setText("");
        phoneNumTF.setText("");
        addrTA.setText("");
        buttonGroup1.clearSelection();
       
        hostNameTF.setText("");
        domainNameTF.setText("");
        
        genderCB.setSelectedIndex(0);
        firstYearFieldCB.setSelectedIndex(0);
        secondYearFieldCB.setSelectedIndex(0);
       
    }
    
     private void setInvisibilty()
     {
         setUnselectedBtnVisibility(true);
         setSelectedBtnVisibility(false);
         //importPicLabel.setVisible(false);
         birthDateWarningLabel.setVisible(false);
        // exportLabel.setVisible(false);
       numInscWarningLabel.setVisible(false); 
       firstNameWarningLabel.setVisible(false);
       lastNameWarningLabel.setVisible(false); 
       lvlWarningLabel.setVisible(false);
       cinWarningLabel.setVisible(false); 
       emailWarningLabel.setVisible(false); 
       phoneNumWarningLabel.setVisible(false);
       genderWarningLabel.setVisible(false);
       fieldLabel.setVisible(false);
        firstYearFieldCB.setVisible(false);
        secondYearFieldCB.setVisible(false);
        
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        tableScrollPane = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        studentAreaLabel = new javax.swing.JLabel();
        numInscTF = new javax.swing.JTextField();
        cinTF = new javax.swing.JTextField();
        firstNameTF = new javax.swing.JTextField();
        lastNameTF = new javax.swing.JTextField();
        domainNameTF = new javax.swing.JTextField();
        addressScrollPane = new javax.swing.JScrollPane();
        addrTA = new javax.swing.JTextArea();
        secondYearFieldCB = new javax.swing.JComboBox();
        lvl1RB = new javax.swing.JRadioButton();
        lvl2RB = new javax.swing.JRadioButton();
        lvl3RB = new javax.swing.JRadioButton();
        lvl5RB = new javax.swing.JRadioButton();
        numInscLabel = new javax.swing.JLabel();
        cinLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        addrLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        lvlLabel = new javax.swing.JLabel();
        numInscWarningLabel = new javax.swing.JLabel();
        cinWarningLabel = new javax.swing.JLabel();
        firstNameWarningLabel = new javax.swing.JLabel();
        lastNameWarningLabel = new javax.swing.JLabel();
        emailWarningLabel = new javax.swing.JLabel();
        lvlWarningLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        lvl4RB = new javax.swing.JRadioButton();
        firstYearFieldCB = new javax.swing.JComboBox();
        atSignLabel = new javax.swing.JLabel();
        hostNameTF = new javax.swing.JTextField();
        phoneNumLabel = new javax.swing.JLabel();
        phoneNumTF = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        phoneNumWarningLabel = new javax.swing.JLabel();
        fieldLabel = new javax.swing.JLabel();
        genderCB = new javax.swing.JComboBox();
        genderWarningLabel = new javax.swing.JLabel();
        export_icon = new javax.swing.JLabel();
        exportLabel = new javax.swing.JLabel();
        dateBirthDC = new com.toedter.calendar.JDateChooser();
        birthDateLabel = new javax.swing.JLabel();
        birthDateWarningLabel = new javax.swing.JLabel();
        importPicIcon = new javax.swing.JLabel();
        importPicLabel = new javax.swing.JLabel();
        picLabel = new javax.swing.JLabel();
        helpIcon = new javax.swing.JLabel();
        btnPanel = new javax.swing.JPanel();
        refreshBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        showButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        showSubjectBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(34, 40, 44));
        setMaximumSize(new java.awt.Dimension(884, 626));
        setPreferredSize(new java.awt.Dimension(884, 626));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(null);

        tableScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tableScrollPane.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableScrollPaneMouseClicked(evt);
            }
        });

        resultTable.setBackground(new java.awt.Color(64, 70, 74));
        resultTable.setForeground(new java.awt.Color(255, 255, 255));
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Inscription num", "CIN", "First name", "Last name", "Phone", "Address", "Level", "Email", "Gender", "Field", "Birth date", "Picture"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.setFocusable(false);
        resultTable.setGridColor(new java.awt.Color(255, 0, 0));
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                resultTableMouseEntered(evt);
            }
        });
        tableScrollPane.setViewportView(resultTable);

        add(tableScrollPane);
        tableScrollPane.setBounds(0, 470, 900, 180);

        studentAreaLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        studentAreaLabel.setForeground(new java.awt.Color(144, 153, 164));
        studentAreaLabel.setText("Student Area");
        add(studentAreaLabel);
        studentAreaLabel.setBounds(20, 0, 160, 31);

        numInscTF.setBackground(new java.awt.Color(34, 40, 44));
        numInscTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        numInscTF.setForeground(new java.awt.Color(255, 255, 255));
        numInscTF.setBorder(null);
        numInscTF.setNextFocusableComponent(cinTF);
        numInscTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                numInscTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                numInscTFFocusLost(evt);
            }
        });
        numInscTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                numInscTFMouseReleased(evt);
            }
        });
        add(numInscTF);
        numInscTF.setBounds(160, 40, 180, 20);

        cinTF.setBackground(new java.awt.Color(34, 40, 44));
        cinTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cinTF.setForeground(new java.awt.Color(255, 255, 255));
        cinTF.setBorder(null);
        cinTF.setNextFocusableComponent(firstNameTF);
        cinTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cinTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cinTFFocusLost(evt);
            }
        });
        add(cinTF);
        cinTF.setBounds(160, 110, 180, 20);

        firstNameTF.setBackground(new java.awt.Color(34, 40, 44));
        firstNameTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        firstNameTF.setForeground(new java.awt.Color(255, 255, 255));
        firstNameTF.setBorder(null);
        firstNameTF.setNextFocusableComponent(lastNameTF);
        firstNameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firstNameTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstNameTFFocusLost(evt);
            }
        });
        add(firstNameTF);
        firstNameTF.setBounds(160, 190, 180, 20);

        lastNameTF.setBackground(new java.awt.Color(34, 40, 44));
        lastNameTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lastNameTF.setForeground(new java.awt.Color(255, 255, 255));
        lastNameTF.setBorder(null);
        lastNameTF.setNextFocusableComponent(phoneNumTF);
        lastNameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lastNameTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lastNameTFFocusLost(evt);
            }
        });
        add(lastNameTF);
        lastNameTF.setBounds(160, 270, 180, 20);

        domainNameTF.setBackground(new java.awt.Color(34, 40, 44));
        domainNameTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        domainNameTF.setForeground(new java.awt.Color(255, 255, 255));
        domainNameTF.setBorder(null);
        domainNameTF.setNextFocusableComponent(genderCB);
        domainNameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                domainNameTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                domainNameTFFocusLost(evt);
            }
        });
        add(domainNameTF);
        domainNameTF.setBounds(670, 190, 110, 20);

        addressScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addrTA.setBackground(new java.awt.Color(34, 40, 44));
        addrTA.setColumns(20);
        addrTA.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addrTA.setForeground(new java.awt.Color(255, 255, 255));
        addrTA.setLineWrap(true);
        addrTA.setRows(4);
        addrTA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addrTAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addrTAFocusLost(evt);
            }
        });
        addressScrollPane.setViewportView(addrTA);

        add(addressScrollPane);
        addressScrollPane.setBounds(540, 30, 180, 60);

        secondYearFieldCB.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        secondYearFieldCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RT", "GL", "IIA", "IMI", "CH", "BIO" }));
        secondYearFieldCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                secondYearFieldCBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                secondYearFieldCBFocusLost(evt);
            }
        });
        add(secondYearFieldCB);
        secondYearFieldCB.setBounds(540, 400, 190, 21);
        secondYearFieldCB.setVisible(false);

        lvl1RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl1RB);
        lvl1RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl1RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl1RB.setSelected(false);
        lvl1RB.setText("1");
        lvl1RB.setNextFocusableComponent(hostNameTF);
        lvl1RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl1RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl1RBFocusLost(evt);
            }
        });
        add(lvl1RB);
        lvl1RB.setBounds(530, 110, 40, 25);

        lvl2RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl2RB);
        lvl2RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl2RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl2RB.setText("2");
        lvl2RB.setNextFocusableComponent(hostNameTF);
        lvl2RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl2RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl2RBFocusLost(evt);
            }
        });
        add(lvl2RB);
        lvl2RB.setBounds(570, 110, 37, 25);

        lvl3RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl3RB);
        lvl3RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl3RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl3RB.setText("3");
        lvl3RB.setNextFocusableComponent(hostNameTF);
        lvl3RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl3RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl3RBFocusLost(evt);
            }
        });
        add(lvl3RB);
        lvl3RB.setBounds(610, 110, 37, 25);

        lvl5RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl5RB);
        lvl5RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl5RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl5RB.setText("5");
        lvl5RB.setNextFocusableComponent(hostNameTF);
        lvl5RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl5RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl5RBFocusLost(evt);
            }
        });
        add(lvl5RB);
        lvl5RB.setBounds(690, 110, 40, 25);

        numInscLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numInscLabel.setForeground(new java.awt.Color(135, 137, 139));
        numInscLabel.setText("Inscription number :");
        add(numInscLabel);
        numInscLabel.setBounds(20, 40, 130, 23);

        cinLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cinLabel.setForeground(new java.awt.Color(135, 137, 139));
        cinLabel.setText("CIN :");
        add(cinLabel);
        cinLabel.setBounds(20, 110, 40, 31);

        firstNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        firstNameLabel.setForeground(new java.awt.Color(135, 137, 139));
        firstNameLabel.setText("First name :");
        add(firstNameLabel);
        firstNameLabel.setBounds(20, 180, 90, 31);

        lastNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lastNameLabel.setForeground(new java.awt.Color(135, 137, 139));
        lastNameLabel.setText("Last name :");
        add(lastNameLabel);
        lastNameLabel.setBounds(20, 260, 90, 30);

        emailLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(135, 137, 139));
        emailLabel.setText("Email : ");
        add(emailLabel);
        emailLabel.setBounds(460, 180, 50, 31);

        addrLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addrLabel.setForeground(new java.awt.Color(135, 137, 139));
        addrLabel.setText("Address :");
        add(addrLabel);
        addrLabel.setBounds(460, 30, 70, 31);

        genderLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        genderLabel.setForeground(new java.awt.Color(135, 137, 139));
        genderLabel.setText("Gender :");
        add(genderLabel);
        genderLabel.setBounds(460, 270, 70, 26);

        lvlLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lvlLabel.setForeground(new java.awt.Color(135, 137, 139));
        lvlLabel.setText("Level :");
        add(lvlLabel);
        lvlLabel.setBounds(460, 110, 60, 25);

        numInscWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        numInscWarningLabel.setText("* Inscription Number must have 7 digits");
        add(numInscWarningLabel);
        numInscWarningLabel.setBounds(160, 70, 240, 16);

        cinWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        cinWarningLabel.setText("* CIN must have 8 digits");
        add(cinWarningLabel);
        cinWarningLabel.setBounds(160, 140, 150, 16);
        cinWarningLabel.setVisible(false);

        firstNameWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        firstNameWarningLabel.setText("* First name must be formed by letters");
        add(firstNameWarningLabel);
        firstNameWarningLabel.setBounds(160, 220, 240, 16);

        lastNameWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        lastNameWarningLabel.setText("* Last name must be formed by letters");
        add(lastNameWarningLabel);
        lastNameWarningLabel.setBounds(160, 300, 260, 16);

        emailWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        emailWarningLabel.setText("* Email must be formed by alphanumerics and one ( . , - , _ )");
        add(emailWarningLabel);
        emailWarningLabel.setBounds(540, 210, 360, 30);

        lvlWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        lvlWarningLabel.setText("* Level must be Selected");
        add(lvlWarningLabel);
        lvlWarningLabel.setBounds(540, 140, 150, 16);
        add(jSeparator1);
        jSeparator1.setBounds(160, 290, 180, 10);
        add(jSeparator2);
        jSeparator2.setBounds(160, 60, 180, 10);
        add(jSeparator3);
        jSeparator3.setBounds(160, 130, 180, 10);
        add(jSeparator4);
        jSeparator4.setBounds(540, 210, 240, 10);
        add(jSeparator5);
        jSeparator5.setBounds(160, 210, 180, 10);

        lvl4RB.setBackground(new java.awt.Color(34, 40, 44));
        buttonGroup1.add(lvl4RB);
        lvl4RB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lvl4RB.setForeground(new java.awt.Color(229, 229, 224));
        lvl4RB.setText("4");
        lvl4RB.setNextFocusableComponent(hostNameTF);
        lvl4RB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lvl4RBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lvl4RBFocusLost(evt);
            }
        });
        add(lvl4RB);
        lvl4RB.setBounds(650, 110, 37, 25);

        firstYearFieldCB.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        firstYearFieldCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MPI", "CBA" }));
        firstYearFieldCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firstYearFieldCBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstYearFieldCBFocusLost(evt);
            }
        });
        add(firstYearFieldCB);
        firstYearFieldCB.setBounds(540, 400, 190, 21);
        firstYearFieldCB.setVisible(false);

        atSignLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        atSignLabel.setForeground(new java.awt.Color(135, 137, 139));
        atSignLabel.setText("@");
        add(atSignLabel);
        atSignLabel.setBounds(650, 190, 20, 20);

        hostNameTF.setBackground(new java.awt.Color(34, 40, 44));
        hostNameTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        hostNameTF.setForeground(new java.awt.Color(255, 255, 255));
        hostNameTF.setBorder(null);
        hostNameTF.setNextFocusableComponent(domainNameTF);
        hostNameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hostNameTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                hostNameTFFocusLost(evt);
            }
        });
        add(hostNameTF);
        hostNameTF.setBounds(540, 190, 110, 20);

        phoneNumLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        phoneNumLabel.setForeground(new java.awt.Color(135, 137, 139));
        phoneNumLabel.setText("Phone :");
        add(phoneNumLabel);
        phoneNumLabel.setBounds(20, 340, 60, 31);

        phoneNumTF.setBackground(new java.awt.Color(34, 40, 44));
        phoneNumTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        phoneNumTF.setForeground(new java.awt.Color(255, 255, 255));
        phoneNumTF.setBorder(null);
        phoneNumTF.setNextFocusableComponent(addrTA);
        phoneNumTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                phoneNumTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                phoneNumTFFocusLost(evt);
            }
        });
        add(phoneNumTF);
        phoneNumTF.setBounds(160, 340, 180, 20);
        add(jSeparator6);
        jSeparator6.setBounds(160, 360, 180, 10);

        phoneNumWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        phoneNumWarningLabel.setText("* Phone number must have 8 digits");
        add(phoneNumWarningLabel);
        phoneNumWarningLabel.setBounds(160, 370, 220, 16);

        fieldLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fieldLabel.setForeground(new java.awt.Color(135, 137, 139));
        fieldLabel.setText("Field :");
        add(fieldLabel);
        fieldLabel.setBounds(460, 400, 50, 26);
        fieldLabel.setVisible(false);

        genderCB.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        genderCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chose your gender", "Male", "Female" }));
        genderCB.setNextFocusableComponent(dateBirthDC);
        genderCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                genderCBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                genderCBFocusLost(evt);
            }
        });
        genderCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                genderCBMouseClicked(evt);
            }
        });
        add(genderCB);
        genderCB.setBounds(540, 270, 190, 21);

        genderWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        genderWarningLabel.setText("* Select a gender ");
        add(genderWarningLabel);
        genderWarningLabel.setBounds(540, 300, 170, 16);
        genderWarningLabel.setVisible(false);

        export_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-microsoft-excel-40.png"))); // NOI18N
        export_icon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        export_icon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                export_iconMouseClicked(evt);
            }
        });
        add(export_icon);
        export_icon.setBounds(10, 420, 40, 50);

        exportLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        exportLabel.setForeground(new java.awt.Color(144, 153, 164));
        exportLabel.setText("export to Google sheet");
        add(exportLabel);
        exportLabel.setBounds(50, 440, 170, 16);

        dateBirthDC.setDateFormatString("yyyy-MM-dd");
        dateBirthDC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dateBirthDCFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateBirthDCFocusLost(evt);
            }
        });
        dateBirthDC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dateBirthDCMouseClicked(evt);
            }
        });
        add(dateBirthDC);
        dateBirthDC.setBounds(540, 340, 190, 22);

        birthDateLabel.setForeground(new java.awt.Color(135, 137, 139));
        birthDateLabel.setText("Birth date :");
        add(birthDateLabel);
        birthDateLabel.setBounds(460, 340, 70, 30);

        birthDateWarningLabel.setForeground(new java.awt.Color(214, 69, 65));
        birthDateWarningLabel.setText("* Enter a valid date");
        add(birthDateWarningLabel);
        birthDateWarningLabel.setBounds(540, 370, 130, 16);

        importPicIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-camera-40.png"))); // NOI18N
        importPicIcon.setText("jLabel1");
        importPicIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        importPicIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importPicIconMouseClicked(evt);
            }
        });
        add(importPicIcon);
        importPicIcon.setBounds(240, 430, 40, 30);

        importPicLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        importPicLabel.setForeground(new java.awt.Color(144, 153, 164));
        importPicLabel.setText("upload picture");
        add(importPicLabel);
        importPicLabel.setBounds(290, 440, 110, 17);
        add(picLabel);
        picLabel.setBounds(730, 10, 160, 170);

        helpIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-help-20.png"))); // NOI18N
        helpIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        helpIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpIconMouseClicked(evt);
            }
        });
        add(helpIcon);
        helpIcon.setBounds(180, 0, 20, 30);

        btnPanel.setBackground(new java.awt.Color(34, 40, 44));
        btnPanel.setForeground(new java.awt.Color(34, 40, 44));

        refreshBtn.setBackground(new java.awt.Color(33, 35, 35));
        refreshBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        refreshBtn.setForeground(new java.awt.Color(255, 255, 255));
        refreshBtn.setText("Refresh");
        refreshBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        refreshBtn.setBorderPainted(false);
        refreshBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        refreshBtn.setIconTextGap(0);
        refreshBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshBtnMouseClicked(evt);
            }
        });
        btnPanel.add(refreshBtn);

        editBtn.setBackground(new java.awt.Color(33, 35, 35));
        editBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        editBtn.setForeground(java.awt.Color.white);
        editBtn.setText("Edit");
        editBtn.setToolTipText("");
        editBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        editBtn.setBorderPainted(false);
        editBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editBtnMouseClicked(evt);
            }
        });
        btnPanel.add(editBtn);

        showButton.setBackground(new java.awt.Color(33, 35, 35));
        showButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        showButton.setForeground(java.awt.Color.white);
        showButton.setText("Search");
        showButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        showButton.setBorderPainted(false);
        showButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        showButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showButtonMouseClicked(evt);
            }
        });
        btnPanel.add(showButton);

        addButton.setBackground(new java.awt.Color(33, 35, 35));
        addButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addButton.setForeground(java.awt.Color.white);
        addButton.setText("Add");
        addButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addButton.setBorderPainted(false);
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addButtonMouseEntered(evt);
            }
        });
        btnPanel.add(addButton);

        removeButton.setBackground(new java.awt.Color(33, 35, 35));
        removeButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        removeButton.setForeground(java.awt.Color.white);
        removeButton.setText("Remove");
        removeButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        removeButton.setBorderPainted(false);
        removeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeButtonMouseClicked(evt);
            }
        });
        btnPanel.add(removeButton);

        showSubjectBtn.setBackground(new java.awt.Color(33, 35, 35));
        showSubjectBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        showSubjectBtn.setForeground(java.awt.Color.white);
        showSubjectBtn.setText("Show subjects");
        showSubjectBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        showSubjectBtn.setBorderPainted(false);
        showSubjectBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        showSubjectBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showSubjectBtnMouseClicked(evt);
            }
        });
        btnPanel.add(showSubjectBtn);

        cancelBtn.setBackground(new java.awt.Color(33, 35, 35));
        cancelBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cancelBtn.setForeground(java.awt.Color.white);
        cancelBtn.setText("Reset");
        cancelBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cancelBtn.setBorderPainted(false);
        cancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });
        btnPanel.add(cancelBtn);

        btnPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));

        add(btnPanel);
        btnPanel.setBounds(460, 430, 440, 30);
    }// </editor-fold>//GEN-END:initComponents
     
    private void numInscTFMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numInscTFMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_numInscTFMouseReleased

    private void numInscTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numInscTFFocusGained
        // TODO add your handling code here:
           numInscWarningLabel.setVisible(false);
        numInscLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_numInscTFFocusGained

    private void numInscTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numInscTFFocusLost
        // TODO add your handling code here:
          numInscLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_numInscTFFocusLost

    private void cinTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cinTFFocusGained
        // TODO add your handling code here:
          cinWarningLabel.setVisible(false);
        cinLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_cinTFFocusGained

    private void cinTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cinTFFocusLost
        // TODO add your handling code here:
          cinLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_cinTFFocusLost

    private void firstNameTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameTFFocusGained
        // TODO add your handling code here:
          firstNameWarningLabel.setVisible(false);
        firstNameLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_firstNameTFFocusGained

    private void firstNameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameTFFocusLost
        // TODO add your handling code here:
         firstNameLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_firstNameTFFocusLost

    private void lastNameTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastNameTFFocusGained
        // TODO add your handling code here:
          lastNameWarningLabel.setVisible(false);
        lastNameLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lastNameTFFocusGained

    private void lastNameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastNameTFFocusLost
        // TODO add your handling code here:
         lastNameLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lastNameTFFocusLost

    private void addrTAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addrTAFocusGained
        // TODO add your handling code here:
        addrLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_addrTAFocusGained

    private void addrTAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addrTAFocusLost
        // TODO add your handling code here:
         addrLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_addrTAFocusLost

    private void secondYearFieldCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_secondYearFieldCBFocusGained
        // TODO add your handling code here:
         fieldLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_secondYearFieldCBFocusGained

    private void secondYearFieldCBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_secondYearFieldCBFocusLost
        // TODO add your handling code here:
         fieldLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_secondYearFieldCBFocusLost

    private void lvl1RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl1RBFocusGained
        // TODO add your handling code here:
      lvlWarningLabel.setVisible(false);
      secondYearFieldCB.setVisible(false);
      fieldLabel.setVisible(true);
      firstYearFieldCB.setVisible(true);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl1RBFocusGained

    private void lvl1RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl1RBFocusLost
        // TODO add your handling code here:
        lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl1RBFocusLost

    private void domainNameTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_domainNameTFFocusGained
        // TODO add your handling code here:
         emailWarningLabel.setVisible(false);
        emailLabel.setForeground(new java.awt.Color(57,113,177));
        atSignLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_domainNameTFFocusGained

    private void domainNameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_domainNameTFFocusLost
        // TODO add your handling code here:
        emailLabel.setForeground(new java.awt.Color(95,97,99));
          atSignLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_domainNameTFFocusLost

    private void lvl2RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl2RBFocusGained
        // TODO add your handling code here:
        lvlWarningLabel.setVisible(false);
        firstYearFieldCB.setVisible(false);
        fieldLabel.setVisible(true);
        secondYearFieldCB.setVisible(true);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl2RBFocusGained

    private void lvl2RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl2RBFocusLost
        // TODO add your handling code here:
        lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl2RBFocusLost

    private void lvl3RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl3RBFocusGained
        // TODO add your handling code here:
          fieldLabel.setVisible(true);
          firstYearFieldCB.setVisible(false);
        secondYearFieldCB.setVisible(true);
        lvlWarningLabel.setVisible(false);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl3RBFocusGained

    private void lvl3RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl3RBFocusLost
        // TODO add your handling code here:
        lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl3RBFocusLost

    private void lvl5RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl5RBFocusGained
        // TODO add your handling code here:
         fieldLabel.setVisible(true);
         firstYearFieldCB.setVisible(false);
        secondYearFieldCB.setVisible(true);
        lvlWarningLabel.setVisible(false);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl5RBFocusGained

    private void lvl5RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl5RBFocusLost
        // TODO add your handling code here:
        lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl5RBFocusLost

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        // TODO add your handling code here:
       
          // refreshBtnMouseClicked(null);
             
             //creating new thread
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {
                          
                            //new Student data is valid
                             Student newStudent = validateData();
                             if(result.contains(newStudent))
                                 throw new DuplicatedStudentException();
                            String fileName = newStudent.getFileName();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+add_student");//undecating to server that it's a adding studnet request
                            out.writeObject(newStudent);
                            out.writeObject(user);     //providing the student to the server
                           
                                
                              
                           
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                  
                                new Message_Dialog("Student "+newStudent.getFirstName()+" "+newStudent.getLastName()+" added to database successfully .");
                                if(newStudent.isHasPic())
                                {
                                       ImageIcon img = new ImageIcon(fileName);
                                       out.writeObject(img);
                                       String extension = fileName.substring(fileName.lastIndexOf("."));
                                       out.writeObject(extension);
                                        response = (String) in.readObject();
                                        
                                        if(response.equals("pic_recieved-"))
                                        {
                                            
                                        }else if(response.equals("err-"))
                                        {
                                            new Message_Dialog("something went wrong when sending the image .");
                                        }else
                                        {
                                            new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                                        }
                                            }      
                                                refreshBtnMouseClicked(null);
                                                cancelBtnMouseClicked(null);
                                                
                              
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An unknown error has occuried during the adding process , please check the servers log files");
                            }
                               else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                           new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");

                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }catch(InvalidNumInscriptionException ex )
                        {
                            numInscWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidCinException ex)
                        {
                            cinWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidNomException ex )
                        {
                            firstNameWarningLabel.setVisible(true) ;
                        }catch(InvalidPrenomException ex )
                        {
                            lastNameWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidEmailException ex )
                        {
                            emailWarningLabel.setVisible(true);
                        }catch(InvalidLevelException ex)
                        {
                            lvlWarningLabel.setVisible(true);
                        }catch(InvalidPhoneNumException ex)
                        {
                            phoneNumWarningLabel.setVisible(true);
                        }catch(InvalidGenderException ex)
                        {
                            genderWarningLabel.setVisible(true);
                        } catch (InvalidDateException ex) {
                            birthDateWarningLabel.setVisible(true);
                        } catch (DuplicatedStudentException ex) {
                           new Message_Dialog("Unable to add the student : Inscription number and CIN must be unique .");
                        }


                    }
                }).start();
             
            
        
    }//GEN-LAST:event_addButtonMouseClicked

    private Student validateData() throws InvalidNumInscriptionException, InvalidCinException, InvalidNomException, InvalidPrenomException, InvalidPhoneNumException, InvalidLevelException, InvalidEmailException, InvalidGenderException, InvalidDateException
    {
         String numInscription = verifNumInscription(numInscTF.getText().trim());
                            String cin = verifCinPhone(cinTF.getText().trim(),0);
                            String firstName = verifnom(firstNameTF.getText().trim());
                            String lastName = verifprenom(lastNameTF.getText().trim() );
                            String phoneNum = verifCinPhone(phoneNumTF.getText().trim(),1);
                            int level = isLvlSelected();
                            int fieldId = fieldSelectedIndex(level);
                            String email = verifemail(hostNameTF.getText().trim(),domainNameTF.getText().trim()) ; 
                            int  gender = isGenderSelected();
                            String address = addrTA.getText().trim();
                            String birthDate = isValidDate();
                            boolean hasPic = picUploaded;
                             
                            
                            
                            //new Student data is valid
                            Student newStudent= new Student(numInscription, cin, firstName, lastName, email, address, level, phoneNum, gender, fieldId,birthDate,hasPic);
                            newStudent.setFileName(fileName);
                            
                            return newStudent;
    }
    
    private String isValidDate() throws InvalidDateException
    {
         if(dateBirthDC.getDate()!=null)
                            {
                               
                            DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                            String date = format.format(dateBirthDC.getDate());
                            String resultDate = date;
                            String now = format.format(new Date());
                            
                            int yearNow=Integer.parseInt(now.substring(0,now.indexOf("-")));
                            int yearDate = Integer.parseInt(date.substring(0,now.indexOf("-")));
                            
                            if(yearDate>yearNow)
                                throw new InvalidDateException();
                            else if(yearDate<yearNow)
                            {
                                birthDateWarningLabel.setVisible(false);
                                 return resultDate;
                            }
                            else
                            {
                            now = now.substring(now.indexOf("-")+1);
                            date = date.substring(date.indexOf("-")+1);
                            
                            int monthNow=Integer.parseInt(now.substring(0,now.indexOf("-")));
                            int monthDate = Integer.parseInt(date.substring(0,now.indexOf("-")));
                            if(monthDate>monthNow)
                                 throw new InvalidDateException();
                            else if(monthDate<monthNow)
                                 {
                                birthDateWarningLabel.setVisible(false);
                                 return resultDate;
                            }
                            
                            else
                            {
                            now = now.substring(now.indexOf("-")+1);
                            date = date.substring(date.indexOf("-")+1);
                            
                             int dayNow=Integer.parseInt(now);
                            int dayDate = Integer.parseInt(date);
                            
                           
                            if(dayDate>=dayNow)
                                throw new InvalidDateException();
                            else
                                 {
                                birthDateWarningLabel.setVisible(false);
                                 return resultDate;
                            }
                           
                            }
            
                            }   
                            }else
                                throw new InvalidDateException();
         
    }
    
    
    private void lvl4RBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl4RBFocusGained
        // TODO add your handling code here:
          fieldLabel.setVisible(true);
          firstYearFieldCB.setVisible(false);
        secondYearFieldCB.setVisible(true);
         lvlWarningLabel.setVisible(false);
        lvlLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_lvl4RBFocusGained

    private void lvl4RBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lvl4RBFocusLost
        // TODO add your handling code here:
           lvlLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_lvl4RBFocusLost

    private void firstYearFieldCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstYearFieldCBFocusGained
        // TODO add your handling code here:
         fieldLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_firstYearFieldCBFocusGained

    private void firstYearFieldCBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstYearFieldCBFocusLost
        // TODO add your handling code here:
         fieldLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_firstYearFieldCBFocusLost

    private void hostNameTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostNameTFFocusGained
        // TODO add your handling code here:
          emailWarningLabel.setVisible(false);
        emailLabel.setForeground(new java.awt.Color(57,113,177));
        atSignLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_hostNameTFFocusGained

    private void hostNameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostNameTFFocusLost
        // TODO add your handling code here:
            emailLabel.setForeground(new java.awt.Color(95,97,99));
             atSignLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_hostNameTFFocusLost

    private void phoneNumTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneNumTFFocusGained
        // TODO add your handling code here:
        phoneNumWarningLabel.setVisible(false);
        phoneNumLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_phoneNumTFFocusGained

    private void phoneNumTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneNumTFFocusLost
        // TODO add your handling code here:
         phoneNumLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_phoneNumTFFocusLost

    private void genderCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_genderCBFocusGained
        // TODO add your handling code here:
        genderLabel.setForeground(new java.awt.Color(57,113,177));
        genderWarningLabel.setVisible(false);
    }//GEN-LAST:event_genderCBFocusGained

    private void genderCBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_genderCBFocusLost
        // TODO add your handling code here:
         genderLabel.setForeground(new java.awt.Color(95,97,99));
           if(genderCB.getSelectedIndex()==1)
         {
             picLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-man-student-100.png")));
    
         }else if(genderCB.getSelectedIndex()==2)
         {
         picLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App_Frames/icons/icons8-woman-student-100.png")));
         }
      
    }//GEN-LAST:event_genderCBFocusLost

    private void refreshBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshBtnMouseClicked
        // TODO add your handling code here:
        
        new Thread(new Runnable() {
            
            @Override
            public void run() {
                
                 try {

                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+show_all_students");//undecating to server that it's a show all studnets request
                            out.writeObject(user);     //providing the student to the server
                           //recieve the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                 //receving the response
                                  result = (ArrayList<Student>)in.readObject();
                                  addStudentsResultTable(result);
                                 // cancelBtnMouseClicked(null);
 
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An unknown error has occuried during the showing process , please check the servers log files");
                            }
                            else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please check your network and try again ");
                            }
                        }catch(IOException ex)
                        {
                            new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("dependencies are missing , please make sure that the application files are safe and that it is running in JRE 8u241");
                        


                    }
                
            }
        }).start();
        
    }//GEN-LAST:event_refreshBtnMouseClicked

    private void addStudentsResultTable(Collection<Student> result)
    {
        resultTable.removeAll();
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        
        while(model.getRowCount()>0)
            model.removeRow(0);
        
                                Object row[] = new Object[12];
                                for(Student student : result)
                                {
                                    row[0] = student.getInscriptionNum();
                                    
                                    row[1] = student.getCin();
                                    row[2] = student.getFirstName();
                                    row[3] = student.getLastName();
                                    row[4] = student.getPhoneNum();
                                    row[5] = student.getAddress();
                                    row[6] = (int)student.getLevel();
                                    row[7] = student.getEmail();
                                    row[8] = (student.getGender()==0)?"Male":"Female";
                                    int tmp = student.getFieldId();
                                    switch(tmp)
                                    {
                                        case 1:row[9]="MPI";break;
                                        case 2:row[9]="CBA";break;
                                        case 3:row[9]="RT";break;
                                        case 4:row[9]="GL";break;
                                        case 5:row[9]="IIA";break;
                                        case 6:row[9]="IMI";break;
                                        case 7:row[9]="CH";break;
                                        default:row[9]="BIO";
                                        
                                    }
                                    row[10] = student.getBirthDate();
                                    row[11] = (student.isHasPic()==true)?"Yes":"No";
                                    model.addRow(row);
                                }
    }
    
    private void showButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showButtonMouseClicked
        // TODO add your handling code here:
        //creating new thread
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {

                            //new Student data is valid
                             Student newStudent = getData();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+show_students");//undecating to server that it's a show students request
                            out.writeObject(newStudent);//sending the student to server
                            out.writeObject(user);     //providing the student to the server
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                //recieving the data
                                Collection<Student> result =(ArrayList<Student>)in.readObject();
                                addStudentsResultTable(result);
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An error has occuried during the showing process , please check the servers log files");
                            }
                               else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                              new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");

                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }


                    }
                }).start();
             
        
    }//GEN-LAST:event_showButtonMouseClicked

    private Student getData()
    {
        String numInscription = numInscTF.getText().trim();
                            String cin = cinTF.getText().trim();
                            String firstName = firstNameTF.getText().trim();
                            String lastName = lastNameTF.getText().trim();
                            String phoneNum = phoneNumTF.getText().trim();
                            
                            int level ;
                            if(lvl1RB.isSelected())
                                level=1;
                            else if(lvl2RB.isSelected())
                                level=2;
                            else if(lvl3RB.isSelected())
                                level=3;
                            else if(lvl4RB.isSelected())
                                level=4;
                            else if(lvl5RB.isSelected())
                                level=5;
                            else
                                level =-1;
                            
                            int fieldId = (level==-1)?-1:fieldSelectedIndex(level);
                            String email = hostNameTF.getText().trim()+"@"+domainNameTF.getText().trim() ; 
                            int  gender = genderCB.getSelectedIndex()-1;
                            String address = addrTA.getText().trim();
                            String birthDate = (dateBirthDC.getDate()!=null)?new SimpleDateFormat("YYYY-MM-d").format(dateBirthDC.getDate()):"null";
                            //new Student data is valid
                             return new Student(numInscription, cin, firstName, lastName, email, address, level, phoneNum, gender, fieldId,birthDate,true);
    }
    private void removeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseClicked
        // TODO add your handling code here:
          //creating new thread
        int selectedRow = resultTable.getSelectedRow();
        if(selectedRow == -1)
            new Message_Dialog("Select a student to remove");
        else
        {
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {
                           
                            
                            //new Student data is valid
                             Student newStudent = getData();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+remove_student");//undecating to server that it's a show students request
                            out.writeObject(newStudent);//sending the student to server
                            out.writeObject(user);     //providing the student to the server
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                 new Message_Dialog("Student with the chosen infromations has been removed successfully .");
                                 refreshBtnMouseClicked(null);
                                 cancelBtnMouseClicked(null);
                            }else if(response.equals("no_student_removed-"))
                            {
                                    new Message_Dialog("no student found with the provided infromations");
                            
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An error has occuried during the showing process , please check the servers log files");
                            }
                                else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                            new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");

                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }


                    }
                }).start();
        }
    }//GEN-LAST:event_removeButtonMouseClicked

private boolean setValues() throws ParseException
{
  int selectedIndex = resultTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)resultTable.getModel();
        String inscriptionNum = model.getValueAt(selectedIndex,0).toString();
         oldInscriptionNum = inscriptionNum;
        
        String cin= model.getValueAt(selectedIndex,1).toString();
        oldCin = cin;
        String firstName= model.getValueAt(selectedIndex,2).toString();
        String lastName= model.getValueAt(selectedIndex,3).toString();
      
        String phoneNum= model.getValueAt(selectedIndex,4).toString();
        String address= model.getValueAt(selectedIndex,5).toString();
         int level =Integer.parseInt(model.getValueAt(selectedIndex,6).toString());
           String email= model.getValueAt(selectedIndex,7).toString();
         int gender = (model.getValueAt(selectedIndex,8).toString().equals("Male"))?1:2;
         String fieldWording =  model.getValueAt(selectedIndex,9).toString();
         String birthDate = (String)model.getValueAt(selectedIndex,10);
         boolean hasPic = (model.getValueAt(selectedIndex,11).toString().equals("Yes"))?true:false;
         int fieldId;
         if(fieldWording.equals("MPI"))
             fieldId=1;
         else if(fieldWording.equals("CBA"))
             fieldId=2;
         else if(fieldWording.equals("RT"))
             fieldId=3;
         else if(fieldWording.equals("GL"))
             fieldId=4;
         else if(fieldWording.equals("IIA"))
             fieldId=5;
         else if(fieldWording.equals("IMI"))
             fieldId=6;
         else if(fieldWording.equals("CH"))
             fieldId=7;
         else
             fieldId=8;
         
         numInscTF.setText(inscriptionNum);
        
         cinTF.setText(cin);
         firstNameTF.setText(firstName);
        lastNameTF.setText(lastName);
        phoneNumTF.setText(phoneNum);
        addrTA.setText(address);
        if(level == 1)
            lvl1RB.setSelected(true);
        else if(level == 2)
            lvl2RB.setSelected(true);
        else if(level == 3)
            lvl3RB.setSelected(true);
        else if(level == 4)
            lvl4RB.setSelected(true);
            else
            lvl5RB.setSelected(true);
           
          hostNameTF.setText(email.substring(0,email.indexOf("@")));
          domainNameTF.setText(email.substring(email.indexOf("@")+1));
          genderCB.setSelectedIndex(gender);
          if(level == 1)
          {
              firstYearFieldCB.setSelectedIndex(fieldId-1);
              firstYearFieldCB.setVisible(true);
              fieldLabel.setVisible(true);
          }
              else
          {
              secondYearFieldCB.setSelectedIndex(fieldId-3);
                secondYearFieldCB.setVisible(true);
              fieldLabel.setVisible(true);
          }
         dateBirthDC.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(birthDate));
         if(hasPic==false)
             genderCBFocusLost(null);
         return hasPic;
} 


private void setSelectedBtnVisibility(boolean isVisible)
{
     editBtn.setVisible(isVisible);
         removeButton.setVisible(isVisible);
         showSubjectBtn.setVisible(isVisible);

}

private void setUnselectedBtnVisibility(boolean isVisible)

{
    addButton.setVisible(isVisible);
}
    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        // TODO add your handling code here:
        
        
        cancelBtnMouseClicked(evt);
        setSelectedBtnVisibility(true);
        setUnselectedBtnVisibility(false);
        
        resultTable.setRowSelectionAllowed(true);
        try
        {
         boolean hasPic=setValues();
        String inscNum =oldInscriptionNum;
        
                    if(hasPic)
                    {
                          ObjectOutputStream out = null;
                            ObjectInputStream in = null;
                    try {
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            
                            out = new ObjectOutputStream(socket.getOutputStream());
                             in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+get_student_pic");//undecating to server that it's a adding studnet request
                            out.writeObject(inscNum);
            
                            //receving the response
                            String response = (String)in.readObject();
                            System.out.println(response);
                            if(response.equals("ok-"))
                            {
                                  
                               ImageIcon pic = (ImageIcon)in.readObject();
                                picLabel.setIcon(new ImageIcon(pic.getImage().getScaledInstance(picLabel.getWidth(), picLabel.getHeight(), Image.SCALE_SMOOTH)));
                              
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An unknown error has occuried when loading the selected student's picture , please check the servers log files");
                            }
                               else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                          
                        }catch(IOException ex)
                        {
                             new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }finally
                    {
                        try
                        {
                          if(in!=null)
                                in.close();
                            if(out!=null)
                                 out.close();
                        }catch(IOException ex)
                        {
                            
                        }
                    }
                    }
        }catch(ParseException ex)
        {
            new Message_Dialog("not able to get Date from selected user.");
        }
        
        
        
    }//GEN-LAST:event_resultTableMouseClicked

    private void editBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBtnMouseClicked
        // TODO add your handling code here:
            //creating new thread
        int selectedRow = resultTable.getSelectedRow();
        if(selectedRow == -1)
            new Message_Dialog("Select a student to edit");
        else
        {
           // refreshBtnMouseClicked(null);
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                       
                        try {
                           
                            //new Student data is valid
                             Student newStudent = validateData();
                             if(!oldInscriptionNum.equals(newStudent.getInscriptionNum()) && !oldCin.equals(newStudent.getCin()))
                                 if(result.contains(newStudent))
                                     throw new DuplicatedStudentException();
                             
                             String fileName = newStudent.getFileName();
                            //establishing the connection
                            Socket socket = new Socket(server_ip,PORT);
                            //opening out/in streams with the server 
                            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                            //sending the user to server
                            out.writeObject("+edit_student");//undecating to server that it's a show students request
                            out.writeObject(newStudent);//sending the student to server
                            out.writeObject(user);     //providing the student to the server
                            out.writeObject(oldInscriptionNum);
                            //receving the response
                            String response = (String)in.readObject();
                            if(response.equals("ok-"))
                            {
                                 new Message_Dialog("Students with the chosen infromations has been edited successfully .");
                                    if(newStudent.isHasPic())
                                {
                                       ImageIcon img = new ImageIcon(fileName);
                                       out.writeObject(img);
                                       String extension = fileName.substring(fileName.lastIndexOf("."));
                                       out.writeObject(extension);
                                        response = (String) in.readObject();
                                        
                                        if(response.equals("pic_recieved-"))
                                        {
                                            
                                        }else if(response.equals("err-"))
                                        {
                                            new Message_Dialog("something went wrong when sending the image .");
                                        }else
                                        {
                                            new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                                        }
                                            }       
                                 refreshBtnMouseClicked(null);
                                 cancelBtnMouseClicked(null);
                            }else if(response.equals("no_student_edited-"))
                            {
                                    new Message_Dialog("no student found with the provided infromations");
                            
                            }else if(response.equals("err-"))
                            {
                                new Message_Dialog("An error has occuried during the showing process , please check the servers log files");
                            }
                               else if(response.equals("SQL_err-"))
                            {
                                new Message_Dialog("DATABASE ERROR : Database server is unable to fetch this querry , please make sure that you respect the constraints .");
                            }
                            else if(response.equals("IO_err-"))
                            {
                                  new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");
                            }
                            else if(response.equals("CNF_err-"))
                            {
                                new Message_Dialog("Server ERROR : server dependencies are missing , please make sure that the servers files are safe and run the application in JRE 8u241 .");
                            }
                            else
                            {
                                 new Message_Dialog("Commenication link failure : Recivied DATA is corrupted , please try again ");
                            }
                        }catch(IOException ex)
                        {
                             new Message_Dialog("Server ERROR : Something went wrong with the streams , please make sure that you are connected to the server , that the server is online and try again .");

                        } catch (ClassNotFoundException ex) {
                           new Message_Dialog("Something went wrong please contact the developers");
                        }catch(InvalidNumInscriptionException ex )
                        {
                            numInscWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidCinException ex)
                        {
                            cinWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidNomException ex )
                        {
                            firstNameWarningLabel.setVisible(true) ;
                        }catch(InvalidPrenomException ex )
                        {
                            lastNameWarningLabel.setVisible(true) ;
                        }
                        catch(InvalidEmailException ex )
                        {
                            emailWarningLabel.setVisible(true);
                        }catch(InvalidLevelException ex)
                        {
                            lvlWarningLabel.setVisible(true);
                        }catch(InvalidPhoneNumException ex)
                        {
                            phoneNumWarningLabel.setVisible(true);
                        }catch(InvalidGenderException ex)
                        {
                            genderWarningLabel.setVisible(true);
                        } catch (InvalidDateException ex) {
                           birthDateWarningLabel.setVisible(true);
                        } catch (DuplicatedStudentException ex) {
                             new Message_Dialog("Unable to edit the student : Inscription number and CIN must be unique .");
                        }

                    }
                }).start();
             
        }
    }//GEN-LAST:event_editBtnMouseClicked

    private void addButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseEntered
        // TODO add your handling code here:
      
    }//GEN-LAST:event_addButtonMouseEntered

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
       resultTable.setRowSelectionAllowed(false);
        setSelectedBtnVisibility(false);
        setUnselectedBtnVisibility(true);
    }//GEN-LAST:event_formMouseClicked

    private void tableScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableScrollPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableScrollPaneMouseClicked

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        // TODO add your handling code here:
        setInvisibilty();
        initValues();
    }//GEN-LAST:event_cancelBtnMouseClicked

    private void export_iconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_export_iconMouseClicked
        // TODO add your handling code here:
   
                  exportTableToExcel();
        
    }//GEN-LAST:event_export_iconMouseClicked

    private void dateBirthDCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateBirthDCFocusGained
        // TODO add your handling code here:
        birthDateLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_dateBirthDCFocusGained

    private void dateBirthDCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateBirthDCFocusLost
        // TODO add your handling code here:
         birthDateLabel.setForeground(new java.awt.Color(95,97,99));
    }//GEN-LAST:event_dateBirthDCFocusLost

    private void dateBirthDCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateBirthDCMouseClicked
        // TODO add your handling code here:
        birthDateWarningLabel.setVisible(false);
         birthDateLabel.setForeground(new java.awt.Color(57,113,177));
    }//GEN-LAST:event_dateBirthDCMouseClicked

    private void importPicIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importPicIconMouseClicked
        // TODO add your handling code here:
        importPic();
    }//GEN-LAST:event_importPicIconMouseClicked

    private void resultTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_resultTableMouseEntered

    private void genderCBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genderCBMouseClicked
        // TODO add your handling code here:
         
    }//GEN-LAST:event_genderCBMouseClicked

    private void showSubjectBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showSubjectBtnMouseClicked
        // TODO add your handling code here:
           int selectedRow = resultTable.getSelectedRow();
        if(selectedRow!=-1)
        {
            int level;
               try {
                   level = isLvlSelected();
                   int fieldId = fieldSelectedIndex(level);
                   if(studentSubjectFrame != null)
                       studentSubjectFrame.dispose();
                   
                   studentSubjectFrame =  new StudentSubjectFrame(server_ip, PORT, user, fieldId, level);
               } catch (InvalidLevelException ex) {
                  new Message_Dialog("Somthing went wrong , please reselect the student .");
               }
            
            
        }
        else
        {
            new Message_Dialog("Select a student to view its subjects.");
        }
    }//GEN-LAST:event_showSubjectBtnMouseClicked

    private void helpIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpIconMouseClicked
        // TODO add your handling code here:
        if(studentHelpFrame != null)
            studentHelpFrame.dispose();
        studentHelpFrame = new StudentHelpFrame();
    }//GEN-LAST:event_helpIconMouseClicked
// verification Functions
    
    public void disposeFrames()
    {
        if(studentHelpFrame != null)
            studentHelpFrame.dispose();
        
        if(studentSubjectFrame != null)
            studentSubjectFrame.dispose();
    }
    
    private void importPic()
    {
           //Set default location to C:\Users\Authentic\Desktop or your preferred location
            JFileChooser imageFileChoser = new JFileChooser("C:\\Users\\Authentic\\Desktop");
            //Dialog box title
            imageFileChoser.setDialogTitle("Import image ..");
            //Filter only xls, xlsx, xlsm files
            FileNameExtensionFilter fnef = new FileNameExtensionFilter("Image files", "jpg", "png");
            //Setting extension for selected file names
            imageFileChoser.setFileFilter(fnef);
            int chooser = imageFileChoser.showSaveDialog(null);
            
             if (chooser == JFileChooser.APPROVE_OPTION) 
             {
                 File img = imageFileChoser.getSelectedFile();
                 String path = img.getPath();
                 String extension = path.substring(path.lastIndexOf("."));
                 if(img.length()>4194304)
                     new Message_Dialog("Image is too large ,limit = 4Megabytes");
                 else if(!extension.equals(".jpg") && !extension.equals(".png"))
                 {
                     new Message_Dialog("Please select an image , (.jpg,.png)");
                 }
                 else{
                     
                 fileName = img.getAbsolutePath();
                 ImageIcon image = new ImageIcon(new ImageIcon(fileName).getImage().getScaledInstance(picLabel.getWidth(), picLabel.getHeight(),Image.SCALE_SMOOTH));

                 picLabel.setIcon(image);
                 picUploaded=true;
                 }
             }
    }
    
    private void exportTableToExcel() 
    {
     
        try{
              //Set default location to C:\Users\Authentic\Desktop or your preferred location
            JFileChooser excelFileChooser = new JFileChooser("C:\\Users\\Authentic\\Desktop");
            //Dialog box title
            excelFileChooser.setDialogTitle("Save As ..");
            //Filter only xls, xlsx, xlsm files
            FileNameExtensionFilter fnef = new FileNameExtensionFilter("Excel files", "xls", "xlsx", "xlsm");
            //Setting extension for selected file names
            excelFileChooser.setFileFilter(fnef);
            int chooser = excelFileChooser.showSaveDialog(null);
            //Check if save button has been clicked
            if (chooser == JFileChooser.APPROVE_OPTION) {
        TableModel model = resultTable.getModel();
        FileWriter excel = new FileWriter(excelFileChooser.getSelectedFile()+".xlsx");
        //creating excel header
        for(int i = 0; i < model.getColumnCount(); i++){
            excel.write(model.getColumnName(i) + "\t");
        }

        excel.write("\n");

        for(int i=0; i< model.getRowCount(); i++) {
            for(int j=0; j < model.getColumnCount(); j++) {
                excel.write(model.getValueAt(i,j).toString()+"\t");
            }
            excel.write("\n");
        }

        excel.close();
        new Message_Dialog("Data exported successfully");
            }

    }catch(IOException ex){ new Message_Dialog(ex.getMessage()); }
         
  
    }
    
   private int fieldSelectedIndex(int lvl)
   {
       return (lvl == 1)?firstYearFieldCB.getSelectedIndex()+1:secondYearFieldCB.getSelectedIndex()+3;
   }
    
    private int isLvlSelected() throws InvalidLevelException
    {
        boolean lvl1Selected = lvl1RB.isSelected(),lvl2Selected = lvl2RB.isSelected(),lvl3Selected = lvl3RB.isSelected(),lvl4Selected = lvl4RB.isSelected(),lvl5Selected = lvl5RB.isSelected();
         if(!lvl1Selected && !lvl2Selected && !lvl3Selected && !lvl4Selected && !lvl5Selected)
             throw new InvalidLevelException();
         
        if(lvl1Selected)
            return 1;
        if(lvl2Selected)
            return 2;
        if(lvl3Selected)
            return 3;
        if(lvl4Selected)
            return 4;

            return 5;
    }
    
    private int isGenderSelected() throws InvalidGenderException
    {
        int selectedIndex = genderCB.getSelectedIndex();
        if(selectedIndex == 0)
            throw new InvalidGenderException();
        return selectedIndex-1;
    }
    
    
    private String verifNumInscription(String number) throws InvalidNumInscriptionException
    {
       if (number.isEmpty() ) throw new InvalidNumInscriptionException() ; 
      if ( number.length() != 7 ) throw new InvalidNumInscriptionException() ; 
      for (int i = 0 ; i < number.length() ; i++) 
      {
       if (!Character.isDigit(number.charAt(i))) throw new InvalidNumInscriptionException() ; 
      }
    return number ; 
    }
    
    
    private String verifCinPhone(String number ,int mode) throws InvalidCinException  , InvalidPhoneNumException
    {  
        
       if (number.isEmpty() || number.length()!= 8) 
       { if(mode == 0)
            throw new InvalidCinException() ;  
            else
               throw new InvalidPhoneNumException();
       }
       
       for (int i = 0 ; i < number.length() ; i++) 
      {
       if (!Character.isDigit(number.charAt(i)))
       {
            if(mode == 0)
            throw new InvalidCinException() ;  
            else
               throw new InvalidPhoneNumException();
       }
      }
    return number ; 
        
    }
    private String verifnom(String nom ) throws InvalidNomException 
    { 
       
        if (nom.isEmpty() ) throw new InvalidNomException() ; 
        for (int i = 0 ; i< nom.length() ; i ++ )
        {
          if (!Character.isLetter(nom.charAt(i))) throw new InvalidNomException() ; 
              
        }
    return nom ; 
    }
    private String verifprenom(String prenom) throws InvalidPrenomException 
    {
        if(prenom.isEmpty()) throw new InvalidPrenomException() ; 
        for (int i = 0 ; i< prenom.length() ; i ++ )
        {
          if (!Character.isLetter(prenom.charAt(i))) throw new InvalidPrenomException() ; 
              
        }
    return prenom  ;   
    }
   
    
    private String verifemail(String hostName ,String domainName ) throws InvalidEmailException 
    {
       
   
        if(hostName.isEmpty() || domainName.isEmpty())
            throw new InvalidEmailException();
        
        int dotCount=0;
        int dashCount=0;
        int unnderScoreCount=0;
        
        for(int i=0;i<hostName.length();i++)
        {
            char currentChar=hostName.charAt(i);
            if(currentChar=='.')
            {
                dotCount++;
                if(dotCount==2)
                    throw new InvalidEmailException();  
            }else if(currentChar=='-')
            {
                 dashCount++;
                if(dashCount==2)
                    throw new InvalidEmailException();  
            }else if(currentChar=='_')
            {
                 unnderScoreCount++;
                if(unnderScoreCount==2)
                    throw new InvalidEmailException();  
            }
            else if(!Character.isLetterOrDigit(currentChar))
                    throw new InvalidEmailException();
            
        }
        
        
               
        // valid hostName
        
        dashCount=0;
        dotCount=0;
        unnderScoreCount=0;
        
        if(!domainName.contains("."))
            throw new InvalidEmailException();
        
        for(int i=0;i<domainName.length();i++)
        {
            char currentChar=domainName.charAt(i);
           if(currentChar=='.')
            {
                dotCount++;
                if(dotCount==3)
                    throw new InvalidEmailException();  
            }else if(currentChar=='-')
            {
                 dashCount++;
                if(dashCount==2)
                    throw new InvalidEmailException();  
            }else if(currentChar=='_')
            {
                 unnderScoreCount++;
                if(unnderScoreCount==2)
                    throw new InvalidEmailException();  
            }
                else if(!Character.isLetterOrDigit(currentChar))
                    throw new InvalidEmailException();
            }
       
        //valid domain name
        
        return hostName+"@"+domainName;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel addrLabel;
    private javax.swing.JTextArea addrTA;
    private javax.swing.JScrollPane addressScrollPane;
    private javax.swing.JLabel atSignLabel;
    private javax.swing.JLabel birthDateLabel;
    private javax.swing.JLabel birthDateWarningLabel;
    private javax.swing.JPanel btnPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel cinLabel;
    private javax.swing.JTextField cinTF;
    private javax.swing.JLabel cinWarningLabel;
    private com.toedter.calendar.JDateChooser dateBirthDC;
    private javax.swing.JTextField domainNameTF;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emailWarningLabel;
    private javax.swing.JLabel exportLabel;
    private javax.swing.JLabel export_icon;
    private javax.swing.JLabel fieldLabel;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTF;
    private javax.swing.JLabel firstNameWarningLabel;
    private javax.swing.JComboBox firstYearFieldCB;
    private javax.swing.JComboBox genderCB;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JLabel genderWarningLabel;
    private javax.swing.JLabel helpIcon;
    private javax.swing.JTextField hostNameTF;
    private javax.swing.JLabel importPicIcon;
    private javax.swing.JLabel importPicLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTF;
    private javax.swing.JLabel lastNameWarningLabel;
    private javax.swing.JRadioButton lvl1RB;
    private javax.swing.JRadioButton lvl2RB;
    private javax.swing.JRadioButton lvl3RB;
    private javax.swing.JRadioButton lvl4RB;
    private javax.swing.JRadioButton lvl5RB;
    private javax.swing.JLabel lvlLabel;
    private javax.swing.JLabel lvlWarningLabel;
    private javax.swing.JLabel numInscLabel;
    private javax.swing.JTextField numInscTF;
    private javax.swing.JLabel numInscWarningLabel;
    private javax.swing.JLabel phoneNumLabel;
    private javax.swing.JTextField phoneNumTF;
    private javax.swing.JLabel phoneNumWarningLabel;
    private javax.swing.JLabel picLabel;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton removeButton;
    private javax.swing.JTable resultTable;
    private javax.swing.JComboBox secondYearFieldCB;
    private javax.swing.JButton showButton;
    private javax.swing.JButton showSubjectBtn;
    private javax.swing.JLabel studentAreaLabel;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
   
    private boolean isAdding = false;
    private static User user;
    private static int PORT;
    private static String server_ip;
    private static String oldInscriptionNum="";
    private static String oldCin="";
    private static String fileName;
    private static boolean picUploaded=false;
    private static StudentHelpFrame studentHelpFrame = null;
    private static StudentSubjectFrame studentSubjectFrame = null;
    private static Collection<Student> result =null;
}
